<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Dengdezhao</title><link>http://dengdezhao.cn/</link><description></description><lastBuildDate>Wed, 29 Jun 2016 22:20:00 +0800</lastBuildDate><item><title>weblogic配置SSL</title><link>http://dengdezhao.cn/weblogic-ssl.html</link><description>&lt;h3 id="wwwdengdezhaocn"&gt;申请www.dengdezhao.cn的服务器证书&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提交电子流给www.dengdezhao.cn域名申请服务器证书&lt;/li&gt;
&lt;li&gt;电子流通过后会得到cert.pfx证书文件以及证书安装密码“password&amp;rdquo;(此处为方便理解以password代替)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pfxcrtkey"&gt;将得到的pfx证书拆分成crt以及key ###&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安装openssl&lt;/li&gt;
&lt;li&gt;切换到openssl/bin目录，将cert.pfx放置在该目录&lt;/li&gt;
&lt;li&gt;执行命令:&lt;code&gt;openssl pkcs12 -in cert.pfx -nodes -out ddz/prod.pem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提示输入密码,输入&amp;rdquo;password&amp;rdquo;&lt;/li&gt;
&lt;li&gt;执行命令：&lt;code&gt;openssl x509 -in ddz/prod.pem -out ddz/prod.crt&lt;/code&gt;得到crt证书&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="crtp7b"&gt;转换crt证书为p7b&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;双击prod.crt切到”详细信息&amp;rdquo;标签,点击按钮&amp;rdquo;复制到文件&amp;rdquo;&lt;/li&gt;
&lt;li&gt;下一步,选P7B证书，并选中&amp;rdquo;如果可能,则数据包括证书路径中的所有证书&amp;rdquo;&lt;/li&gt;
&lt;li&gt;另存为prod.p7b即完成证书转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="crtp12"&gt;转换crt证书为p12&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;执行命令：&lt;code&gt;openssl pkcs12 -export -clcerts -inkey ddz/prod.pem -in ddz/prod.crt -out ddz/ewallet.p12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提示设置密码,设置为oracle1234（安装时要用到)&lt;/li&gt;
&lt;li&gt;将ewallet.p12以及prod.p7b上传到服务器路径/data01/oracle/req下&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="owm"&gt;配置owm 钱包安装证书&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ITOC连接到服务器&lt;/li&gt;
&lt;li&gt;切换到/data01/oracle/adf/Oracle_WT1/bin目录&lt;/li&gt;
&lt;li&gt;运行./owm &amp;amp;&lt;/li&gt;
&lt;li&gt;在弹出的wallet窗口选择打开/data01/oracle/req下的钱包&lt;/li&gt;
&lt;li&gt;输入密码上一步设置的oracle1234&lt;/li&gt;
&lt;li&gt;可以看到是个空的钱包，在左侧“Trusted Certificates&amp;rdquo;上右键导入prod.p7b&lt;/li&gt;
&lt;li&gt;导入成功即可看到三个证书文件在左侧栏&lt;/li&gt;
&lt;li&gt;勾选wallet菜单下的Auto login项&lt;/li&gt;
&lt;li&gt;然后SAVE钱包退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sslconf"&gt;配置 SSL.conf&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;切换到OHS的配置目录/data01/oracle/adf/Oracle_WT1/instances/instance1/config/OHS/ohs1/&lt;/li&gt;
&lt;li&gt;编辑ssl.conf文件修改Listen Port为443&lt;/li&gt;
&lt;li&gt;修改VirtualHost *：443&lt;/li&gt;
&lt;li&gt;修改SSLWallet路径为 &amp;ldquo;/data01/oracle/req&amp;rdquo;&lt;/li&gt;
&lt;li&gt;保存退出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ohs"&gt;重启OHS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;重启OHS之后即可验证HTTPS访问是否可行。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 29 Jun 2016 22:20:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2016-06-29:weblogic-ssl.html</guid><category>weblogic</category><category>SSL</category></item><item><title>weblogic配置DBAuthenticator</title><link>http://dengdezhao.cn/weblogic-dbauthenticator.html</link><description>&lt;h3 id="_1"&gt;配置数据库表结构&lt;/h3&gt;
&lt;h3 id="providers"&gt;创建Providers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;登陆weblogic控制台,Security Realms-&amp;gt;myReaml-&amp;gt;Providers,创建DBAuthenticator &lt;/li&gt;
&lt;li&gt;登陆EM控制台，bpm_domain-&amp;gt;security-&amp;gt;Security Provider Configuration-&amp;gt;Identity Store Provider
    &lt;strong&gt;PROPERTY_ATTRIBUTE_MAPPING GUID=orclguid&lt;/strong&gt;
    &lt;strong&gt;OPTIMIZE_SEARCH true&lt;/strong&gt;  &lt;br /&gt;
&lt;strong&gt;virtualize true&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="adapter"&gt;创建adapter及导入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建adapter文件存入到&lt;MW_HOME&gt;/oracle_common/modules/oracle.ovd_11.1.1/templates/ 目录下&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换到&lt;MW_HOME&gt;/oracle_common/bin下执行导入命令
    ./libovdadapterconfig.sh -adapterName userGroupAdapter2 -adapterTemplate adapter_template_usergroup2.xml -host localhost -port 7001 -userName weblogic -domainPath /oracle/Oracle/Middleware/user_projects/domains/bpm_domain/ -dataStore DB -root cn=users,dc=oracle,dc=com -contextName default -dataSourceJNDIName UserGroupDS&lt;/p&gt;
&lt;p&gt;./libovdadapterconfig.sh -adapterName userGroupAdapter1 -adapterTemplate adapter_template_usergroup1.xml -host localhost -port 7001 -userName weblogic -domainPath /oracle/Oracle/Middleware/user_projects/domains/bpm_domain/ -dataStore DB -root cn=users,dc=oracle,dc=com -contextName default -dataSourceJNDIName UserGroupDS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ovd"&gt;修改OVD验证配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;切换到/oracle/Oracle/Middleware/user_projects/domains/bpm_domain/config/fwmconfig/ovd/default目录&lt;/li&gt;
&lt;li&gt;修改adapters.os_xml 将critical属性都改为false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="admin"&gt;重启节点及admin服务器&lt;/h3&gt;
&lt;p&gt;重启即可用数据库用户登陆BPM workspace&lt;/p&gt;
&lt;p&gt;参照：http://docs.oracle.com/cd/E23943_01/bi.1111/e10543/privileges.htm#BABEJGIE&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 14 Jun 2016 22:20:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2016-06-14:weblogic-dbauthenticator.html</guid><category>weblogic</category><category>DBAuthenticator</category></item><item><title>weblogic配置jython</title><link>http://dengdezhao.cn/weblogic-jython.html</link><description>&lt;h3 id="jython"&gt;在服务器端使用jython&lt;/h3&gt;
&lt;p&gt;以下以139服务器为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在当前shell环境中设置&lt;code&gt;setWLSEnv.sh&lt;/code&gt;  &lt;br /&gt;
进入&lt;code&gt;/oracle/Oracle/Middleware/wlserver_10.3/server/bin&lt;/code&gt;目录下  &lt;/li&gt;
&lt;li&gt;执行命令 &lt;code&gt;. ./setWLSEnv.sh&lt;/code&gt; &lt;strong&gt;&lt;em&gt;*注意两个点号中间有空格&lt;/em&gt;&lt;/strong&gt;* &lt;/li&gt;
&lt;li&gt;进入WLST：&lt;code&gt;java weblogic.WLST&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入jython： &lt;code&gt;java org.python.util.jython&lt;/code&gt; 可以查看weblogic内置jython版本为jython2.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jython_1"&gt;在jython中加载标准模块&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由于jython的标准模块在&lt;code&gt;$WL_HOME/common/wlst/modules/jython-modules.jar&lt;/code&gt;中，因此需要在启动jython的时候将该路径加载到系统路径中才行&lt;/li&gt;
&lt;li&gt;进入jython命令行 加载sys模块&lt;code&gt;import sys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在系统路径中加入jython-modules.jar, &lt;code&gt;sys.path.append('$WL_HOME/common/wlst/modules/jython-modules.jar/Lib')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后&lt;code&gt;import time&lt;/code&gt;之后便可以import其它标准模块 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="javajython"&gt;在java中调用jython&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由于weblogic自带jython2.2.1，所以不需要引用额外的jython包。(&lt;code&gt;目前测试发现引用最新包时出导致发包失败&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;因要发包在487服务器来测试，以下以487为例，在服务器创建目录/data01/oracle/scripts&lt;/li&gt;
&lt;li&gt;将上文提到的jython-modules.jar复制到scripts目录，或者扩展自己的python脚本&lt;/li&gt;
&lt;li&gt;加载方式：先加载sys模块，&lt;code&gt;import sys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将刚刚的路径添加到sys.path中以便jython能够使用模块&lt;code&gt;sys.path.append('/data01/oracle/scripts/jython-modules.jar/Lib;/data01/oracle/scripts')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;现在便可自由加载/data01/oracle/scripts目录下的模块了&lt;code&gt;import time&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="weblogicjython"&gt;在weblogic容器环境使用高版本的jython&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为何要使用高版本？jython2.2.1版本太过简陋自带只有sys/io模块，所以才会有以上加载标准模块的问题。如果升级高版本之后，自带便有大部分python的标准模块，扩展纯python模块也很方便只需要在路径中加载模块地址即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目前最新版本的jython是jython2.7.0 基于JDK1.8的，而weblogic基于的JDK是1.6，升级起来太麻烦，只能将就weblogic，使用基于JDK1.6的版本jython2.5.4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有两种方法：    &lt;/p&gt;
&lt;h6 id="_1"&gt;方法一：&lt;/h6&gt;
&lt;p&gt;在项目中配置weblogic.xml优先加载Web-inf下的jython2.5.4包
不过在测试中发现应用第一次访问时会报错，之后便正常。推测原因可能是weblogic自带的jython2.2.1版本在服务器启动时便加载，后面weblogic.xml的配置是应用级别的，所以替换就慢了一步，第二次访问应用时才会加载到jython2.5.4的包，于是便报错了。&lt;/p&gt;
&lt;h6 id="_2"&gt;方法二：&lt;/h6&gt;
&lt;p&gt;在修改服务器的weblogic的启动脚本setWeblogic.sh中的CLASSPATH，提前将jython2.5.4的jar包路径放在classpath之前优先加载，重启服务器之后版本便升级为2.5.4(如果要在服务器直接运行jython，由于jrockit的一个BUG导致出错，需要补丁：Patch 16569812）&lt;/p&gt;
&lt;p&gt;修改setDomainEnv.sh中的BEA_JAVA_HOME以及JAVA_HOME，将jrockit补丁路径替换进去，然后执行命令&lt;code&gt;. ./setDomainEnv.sh&lt;/code&gt; 再重启相关节点服务器即可完成升级。    &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jythonzxjdbc"&gt;jython通过zxJDBC操作数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;jython通过zxJDBC操作数据库&lt;/li&gt;
&lt;li&gt;加载zxJDBC  &lt;br /&gt;
&lt;code&gt;from com.ziclix.python.sql import zxJDBC&lt;/code&gt;        &lt;/li&gt;
&lt;li&gt;查找JNDI得到数据库连接   &lt;br /&gt;
&lt;code&gt;conn=zxJDBC.lookup('jdbc/HR_HWLCM')&lt;/code&gt;    &lt;/li&gt;
&lt;li&gt;根据conn得到cursor进行查询     &lt;br /&gt;
&lt;code&gt;cursor=conn.cursor()&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;cursor.execute("select * from testd")&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="jythonrest"&gt;jython调用rest服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调用&lt;strong&gt;GET&lt;/strong&gt;服务 使用urllib2以及json模块即可调用rest服务。其中json在jython2.5中非标准模块，需要下载安装，将json.py移到Lib目录即可加载。详细参照以下代码：  &lt;br /&gt;
&lt;code&gt;import urllib2&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;import json&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;url='http://szxtsp140-or:8001/testrest/jersey/rest/getresult'&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;resp=urllib2.urlopen(url+'/222')&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;result=resp.read()&lt;/code&gt;        &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果输入是json，在pathParam中需要转义,可以使用urllib.quote(jsonstring)对jsonstring进行转义之后，再拼接到url中即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;调用&lt;strong&gt;POST&lt;/strong&gt;服务 参照以下代码    将字典类型的参数先通过json模块的json.write转成json串，再通过urllib模块的quote将json串转义，最终拼成URL，构建Request对象，设置访问方式为&lt;strong&gt;POST&lt;/strong&gt; 其它类型的访问方式如&lt;strong&gt;PUT&lt;/strong&gt;,&lt;strong&gt;DELETE&lt;/strong&gt;均如此设置即可  &lt;br /&gt;
&lt;code&gt;import urllib2&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;import urllib&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;import json&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;url='http://szxtsp140-or:8001/testrest/jersey/rest/putparamters/'&lt;/code&gt;      &lt;br /&gt;
&lt;code&gt;param={"test1":1,"test2":2}&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;jsonparam=json.write(param)&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;encodeparam=urllib.quote(jsonparam)&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;url=url+encodeparam&lt;/code&gt;
&lt;code&gt;req=urllib2.Request(url)&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;req.get_method=lambda:'POST'&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;result=urllib2.urlopen(req)&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;result=result.read()&lt;/code&gt;    &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 17 May 2016 22:20:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2016-05-17:weblogic-jython.html</guid><category>weblogic</category><category>jython</category></item><item><title>weblogic集成tibco</title><link>http://dengdezhao.cn/weblogic-tibco.html</link><description>&lt;p&gt;&lt;strong&gt;1. 配置相关依赖包&lt;/strong&gt;  &lt;br /&gt;
将tibjms.jar放在weblogic的 $Domain_dir/lib目录中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 配置Foreign JNDI Providers&lt;/strong&gt;  &lt;br /&gt;
- 进入weblogic控制台，进入菜单Services-&amp;gt;Foreign JNDI Providers-&amp;gt;Create a Foreign JNDI Provider 创建一个Provider，名称随意。
- Targets 选DefaultServer 完成。
- 点击刚创建的Provider  &lt;br /&gt;
  配置Initial Context Factory: &lt;strong&gt;com.tibco.tibjms.naming.TibjmsInitialContextFactory&lt;/strong&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provider URL:&lt;strong&gt;tcp://nkgtsv027-eip:7222&lt;/strong&gt;    &lt;/li&gt;
&lt;li&gt;User: &lt;strong&gt;WCA_EIP_COMMON&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Password: &lt;strong&gt;WCA_EIP_COMMON&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 配置 Foreign JNDI Links&lt;/strong&gt;
- Local JNDI Name: &lt;strong&gt;jms/eip&lt;/strong&gt; （本地调用时需要用到）
- Remote JNDI Name: &lt;strong&gt;XAQueueConnectionFactory&lt;/strong&gt; （remote端的对外JNDI名）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 在JAVA中调用&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;        InitialContext context = new InitialContext();
    com.tibco.tibjms.naming.TibjmsFederatedXAQueueConnectionFactory cf =
        (com.tibco.tibjms.naming.TibjmsFederatedXAQueueConnectionFactory)
        context.lookup(&amp;quot;jms/eip&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;5. 在JAVA中获取认证信息&lt;/strong&gt;
- 本来以上代码获得ConnectionFactory就可以创建连接了，Connection c = cf.createConnection(); 但是remote服务器的security设置需要再进行一次认证，即通过Connection c = cf.createConnection(name,password);方法创建连接。也就意味着在代码端还需要得到用户密码等信息。
- 当然也可以通过配置的方式实现，不过如果密码定期修改也就比较麻烦。以下通过获取weblogic上配置的用户及密码来进行验证。
- 查询TibjmsFederatedXAQueueConnectionFactory的源码，发现提供一个cf.writeExternal()方法实现environment信息的序列化功能，也就是可以把用户名及密码等信息以流的方式写出来。那么通过反序列化就可以得到用户名及密码。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;    File file = new File(&amp;quot;test.out&amp;quot;);
        out = new ObjectOutputStream(new FileOutputStream(file));
        cf.writeExternal(out);
        out.flush();
        out.close();
        FileInputStream fis = new FileInputStream(file);
        ObjectInputStream ois = new ObjectInputStream(fis);
        Hashtable env = (Hashtable)ois.readObject();
        name = (String)env.get(Context.SECURITY_PRINCIPAL);
        password = (String)env.get(Context.SECURITY_CREDENTIALS);
        file.delete();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;6. 顺利监听到队列并得到JMS消息之后通过JAXB解析消息体&lt;/strong&gt;
- 需要得到消息体XML的XSD定义文件&lt;strong&gt;CIR.xsd&lt;/strong&gt;
- 打开CMD，运行&lt;code&gt;xjc -d . -p com.xxx.jaxbbean CIR.xsd&lt;/code&gt; 便会在com.xxx.jaxbbean包下生成相关的JAVABEAN
- 便可通过JAXBContext对XML消息体进行解析了&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;        context = JAXBContext.newInstance(&amp;quot;com.xxx.jaxbbean&amp;quot;);
        unMarshaller = context.createUnmarshaller();
        obj = unMarshaller.unmarshal(xmlfile);
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Sat, 14 May 2016 22:20:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2016-05-14:weblogic-tibco.html</guid><category>weblogic</category><category>tibco</category></item><item><title>使用RIDC在webcenter portal集成ECM的文档查询功能</title><link>http://dengdezhao.cn/shi-yong-ridczai-webcenter-portalji-cheng-ecmde-wen-dang-cha-xun-gong-neng.html</link><description>&lt;h4 id="_1"&gt;&lt;i class="icon-file"&gt;&lt;/i&gt;   需求：&lt;/h4&gt;
&lt;p&gt;标准的document service很不灵活，实际开发中少不了要开发定制。那么问题来了，通过RIDC很灵活的查询出了需要的文档，如何集成到portal上去呢&lt;/p&gt;
&lt;h4 id="_2"&gt;&lt;i class="icon-folder-open"&gt;&lt;/i&gt; 分析：&lt;/h4&gt;
&lt;p&gt;使用RIDC查询出需要的文档，存放在POJO等数据模型中
利用POJO生成dataControl，开发taskflow等UI层
将以上功能开发成为extend.spaces.webapp，扩展到webcenter spaces
以下主要展现第一步：通过RIDC查询及POJO生成数据模型。&lt;/p&gt;
&lt;h4 id="_3"&gt;&lt;i class="icon-pencil"&gt;&lt;/i&gt; 技术实现：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用RIDC查询文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是主要查询方法, query传入的即是ECM的queryText，例如：
        dDocType &lt;matches&gt; &lt;code&gt;PJT-INTERFACE-DOC&lt;/code&gt;
通过拼接好需要的查询条件以及用户便可以查询出文档。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;    public List&amp;lt;Document&amp;gt; search(String username, String query) {
        ServiceResponse serviceResponse = null;
        List&amp;lt;Document&amp;gt; list = new ArrayList&amp;lt;Document&amp;gt;();
        try {
            if (query == null) {
                return list;
            }
    IdcClient client = getIdcClient();
            DataBinder dataBinderReq = client.createBinder();
        dataBinderReq.putLocal(&amp;quot;IdcService&amp;quot;, &amp;quot;GET_SEARCH_RESULTS&amp;quot;);
            dataBinderReq.putLocal(&amp;quot;QueryText&amp;quot;, query.toString());
            dataBinderReq.putLocal(&amp;quot;ResultCount&amp;quot;, &amp;quot;100&amp;quot;);
            serviceResponse =
                client.sendRequest(new IdcContext(username), dataBinderReq);
            DataBinder dataBinderRes = serviceResponse.getResponseAsBinder();
            DataResultSet resultSet =
            dataBinderRes.getResultSet(&amp;quot;SearchResults&amp;quot;);
            for (DataObject dataObject : resultSet.getRows()) {
                Document d = new Document();
                d.setContentId(dataObject.get(&amp;quot;dDocName&amp;quot;));
                d.setDocumentId(dataObject.get(&amp;quot;dID&amp;quot;));
                d.setOwner(dataObject.get(&amp;quot;dDocAuthor&amp;quot;));
                d.setTitle(dataObject.get(&amp;quot;dDocTitle&amp;quot;));
                d.setDocType(dataObject.get(&amp;quot;dDocType&amp;quot;));
                d.setXspeciality(dataObject.get(&amp;quot;xSPECIALTY&amp;quot;));
                d.setXrcvMajor(dataObject.get(&amp;quot;xRCV_MAJOR&amp;quot;));
                Date date = dataObject.getDate(&amp;quot;dInDate&amp;quot;);
                SimpleDateFormat sf = new SimpleDateFormat(&amp;quot;yyyy/mm/dd&amp;quot;);
                String format = sf.format(date);
                d.setDindate(format);
                list.add(d);
        }
        } catch (Exception ex) {
             System.out.println(&amp;quot;Error Search: &amp;quot; + ex.getMessage());
        } finally {
            if (serviceResponse != null) {
                serviceResponse.close();
            }
        }
        return list;
    } //
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中Document.java即是POJO类&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;    public class Document {
        private String contentId;
        private String documentId;
        private String owner;
        private String title;
        private String doctype;
        private String securitygroup;
        private String dindate;
        private String xDesignPhase;
        private String xspeciality;//send
        private String xrcvMajor;//receive
    ......get set accessor......
    }//end class
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建facade类：MyCondition.java，主要是调用search方法接受RIDC查询的结果集，生成dataControl供UI层使用。参考代码如下：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;    public class MyCondition {
        private static final ADFLogger LOGGER = ADFLogger.createADFLogger(MyCondition.class);
        private ArrayList&amp;lt;Document&amp;gt; receiveDocumentList;
        private ArrayList&amp;lt;Document&amp;gt; sendDocumentList;
        public MyCondition() {
        this.receiveDocumentList=new ArrayList&amp;lt;Document&amp;gt;();
        this.sendDocumentList=new ArrayList&amp;lt;Document&amp;gt;();
        }
        /*******
        * 初始化，调用RIDC API查询出文档数据集
        * *****/
        public String init(){
        LOGGER.severe(&amp;quot;start init....&amp;quot;);
        Object userId = JSFUtils.resolveExpression(&amp;quot;#{securityContext.userName}&amp;quot;);
        Object projectCode = JSFUtils.resolveExpression(&amp;quot;#{pageFlowScope.inputProjectCode}&amp;quot;);
        List&amp;lt;String&amp;gt; spcCode = (List&amp;lt;String&amp;gt;)(JSFUtils.resolveExpression(&amp;quot;#{pageFlowScope.spcCode}&amp;quot;)==null?null:JSFUtils.resolveExpression(&amp;quot;#{pageFlowScope.spcCode}&amp;quot;));
        if(userId==null||&amp;quot;&amp;quot;.equals(userId)){
            LOGGER.severe(&amp;quot;userId is null &amp;quot;);
            FacesMessage msg = new FacesMessage(&amp;quot;用户为空请重试!&amp;quot;);
            JSFUtils.getFacesContext().addMessage(null, msg);
            return &amp;quot;NO&amp;quot;;
        }
        if(projectCode==null||&amp;quot;&amp;quot;.equals(projectCode)){
            LOGGER.severe(&amp;quot;projectCode is null &amp;quot;);
            FacesMessage msg = new FacesMessage(&amp;quot;项目ID为空请重试!&amp;quot;);
            JSFUtils.getFacesContext().addMessage(null, msg);
            return &amp;quot;NO&amp;quot;;
        }
        /******
         * 
         * 生成发出专业SQL,生成接受专业SQL
         * 
         * ****/
        String sendSql=&amp;quot; xSPECIALTY &amp;lt;matches&amp;gt; `NULL` &amp;quot;;
        String receiveSql=&amp;quot; xRCV_MAJOR &amp;lt;matches&amp;gt; `NULL` &amp;quot;;
        if(spcCode==null||spcCode.size()==0){
            LOGGER.severe(&amp;quot;spcCode is null or size is 0&amp;quot;);  
            return &amp;quot;NO&amp;quot;;
        }
        for(int i=0;i&amp;lt;spcCode.size();i++){
            sendSql=sendSql+&amp;quot; &amp;lt;OR&amp;gt; &amp;quot;+&amp;quot;xSPECIALTY &amp;lt;matches&amp;gt; `&amp;quot;+spcCode.get(i)+&amp;quot;` &amp;quot;;
            receiveSql=receiveSql+&amp;quot; &amp;lt;OR&amp;gt; &amp;quot;+&amp;quot;xRCV_MAJOR &amp;lt;matches&amp;gt; `&amp;quot;+spcCode.get(i)+&amp;quot;` &amp;quot;;
        }
        sendSql=&amp;quot;(&amp;quot;+sendSql+&amp;quot;) &amp;lt;AND&amp;gt; dDocType &amp;lt;matches&amp;gt; `PJT-INTERFACE-DOC` &amp;lt;AND&amp;gt; xPROJECT_NUM &amp;lt;starts&amp;gt; `&amp;quot;+projectCode+&amp;quot;`&amp;quot;;
        receiveSql=&amp;quot;(&amp;quot;+receiveSql+&amp;quot;) &amp;lt;AND&amp;gt; dDocType &amp;lt;matches&amp;gt; `PJT-INTERFACE-DOC` &amp;lt;AND&amp;gt; xPROJECT_NUM &amp;lt;starts&amp;gt; `&amp;quot;+projectCode+&amp;quot;`&amp;quot;;
        LOGGER.severe(&amp;quot;sendSql:&amp;quot;+sendSql);
        LOGGER.severe(&amp;quot;receiveSql:&amp;quot;+receiveSql);
        /*** 
         * 查询当前用户在该项目中的专业（ME,EL等)，拼接QueryText
         * dDocType &amp;lt;matches&amp;gt; `PJT-INTERFACE-DOC`
         * ******/
        UCMAdapter ap=new UCMAdapter();
        this.sendDocumentList = (ArrayList&amp;lt;Document&amp;gt;)ap.search(userId.toString(), sendSql);
        this.receiveDocumentList = (ArrayList&amp;lt;Document&amp;gt;)ap.search(userId.toString(), receiveSql);
        LOGGER.severe(&amp;quot;success init...YES.&amp;quot;);
        return &amp;quot;YES&amp;quot;;
    }

    public void setReceiveDocumentList(ArrayList&amp;lt;Document&amp;gt; receiveDocumentList) {
        this.receiveDocumentList = receiveDocumentList;
    }

    public ArrayList&amp;lt;Document&amp;gt; getReceiveDocumentList() {
        return receiveDocumentList;
    }

    public void setSendDocumentList(ArrayList&amp;lt;Document&amp;gt; sendDocumentList) {
        this.sendDocumentList = sendDocumentList;
    }

    public ArrayList&amp;lt;Document&amp;gt; getSendDocumentList() {
        return sendDocumentList;
    }
}
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Fri, 28 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2014-11-28:shi-yong-ridczai-webcenter-portalji-cheng-ecmde-wen-dang-cha-xun-gong-neng.html</guid><category>ECM</category></item><item><title>定制webcenter的people connection组件</title><link>http://dengdezhao.cn/ding-zhi-webcenterde-people-connectionzu-jian.html</link><description>&lt;h4 id="_1"&gt;&lt;i class="icon-file"&gt;&lt;/i&gt;   需求：&lt;/h4&gt;
&lt;p&gt;webcenter的people connection类似于微博的关注粉丝功能，现在需要利用程序让某一用户自动关注一批人员。比如某一用户所在项目&lt;code&gt;(PROJECT1)&lt;/code&gt;下有10个成员，则该用户进入portal的时候默认就展示其项目下的10个成员在某一分组&lt;code&gt;(PROJECT1)&lt;/code&gt;下。&lt;/p&gt;
&lt;h4 id="_2"&gt;&lt;i class="icon-folder-open"&gt;&lt;/i&gt; 分析：&lt;/h4&gt;
&lt;p&gt;根据项目PROJECT1可以查询出10个成员名；
利用API将10个成员添加到Connections中；
利用API创建Connection list，也即是分组名&lt;code&gt;(PROJECT1)&lt;/code&gt;；
将10个成员的Connection 添加到分组PROJECT1中。&lt;/p&gt;
&lt;h4 id="_3"&gt;&lt;i class="icon-pencil"&gt;&lt;/i&gt; 技术实现：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据项目PROJECT1可以查询出10个成员名；
在AMimpl中创建查询成员名方法以List返回结果。
    public List&lt;String&gt; getAllMembersByProjectId(String proId){
        List&lt;String&gt; result=new ArrayList&lt;String&gt;();
        result.add(&amp;ldquo;CG02&amp;rdquo;);
        result.add(&amp;ldquo;CG03&amp;rdquo;);
        result.add(&amp;ldquo;CG04&amp;rdquo;);
        result.add(&amp;ldquo;CG05&amp;rdquo;);
        result.add(&amp;ldquo;pierre&amp;rdquo;);
        result.add(&amp;ldquo;weblogic&amp;rdquo;);
        //TODO 根据项目ID proId查询出项目所有成员以List返回
        return result;
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用API将10个成员添加到Connections中；
oracle.webcenter.peopleconnections.connections.internal.model.ConnectionsManagerImpl.createConnection 方法可以给两个guid创建Connection
    ConnectionsServiceFactory fac=ConnectionsServiceFactory.getInstance();
    ConnectionsManagerImpl cm=(ConnectionsManagerImpl)fac.getConnectionsManager();
    cm.createConnection(ownerUserId, connectUserId);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用API创建Connection list，也即是分组名&lt;code&gt;(PROJECT1)&lt;/code&gt;；
ConnectionListsManager.createConnectionList 可以创建分组
    ConnectionsServiceFactory fac=ConnectionsServiceFactory.getInstance();
    fac.getConnectionListsManager().createConnectionList(&amp;ldquo;PROJECT1&amp;rdquo;);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将10个成员的Connection 添加到分组PROJECT1中。
利用API ConnectionListsManager.addMembersToConnectionList方法可以将创建好的Connection添加到分组中去。样例代码如下：
    ConnectionsServiceFactory fac=ConnectionsServiceFactory.getInstance();
    fac.getConnectionListsManager().addMembersToConnectionList(List, &amp;ldquo;PROJECT1&amp;rdquo;);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建Webcenter Portal Server Extension应用，创建TaskFlow调用以上方法；发布扩展应用到spaces，重启spaces，定义resource catalog应用到portal上即可。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Thu, 23 Oct 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2014-10-23:ding-zhi-webcenterde-people-connectionzu-jian.html</guid><category>peopleConnection</category></item><item><title>动态改变LOV的值集</title><link>http://dengdezhao.cn/dong-tai-gai-bian-lovde-zhi-ji.html</link><description>&lt;h4 id="_1"&gt;&lt;i class="icon-file"&gt;&lt;/i&gt;   需求：&lt;/h4&gt;
&lt;p&gt;LOV的值集需要根据传入的用户角色类型(A,B,C)动态改变，A时查询所有，B时过滤字段1，C时过滤字段2.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基础VO的SQL如下:&lt;/strong&gt;
    SELECT DISTINCT U.USER_ID, U.USER_NAME, F.FULL_NAME AS DESCRIPTION
    FROM FND_USER U, PO_HEADERS_ALL P, PO_VENDORS V, PER_PEOPLE_F F
    WHERE U.EMPLOYEE_ID = P.AGENT_ID
    AND P.VENDOR_ID = V.VENDOR_ID
    AND F.PERSON_ID(+) = U.EMPLOYEE_ID
    AND P.APPROVED_FLAG = &amp;lsquo;Y&amp;rsquo;
    AND ((P.VENDOR_ID = :VARVENDORID AND :VARUSERTYPE = &amp;lsquo;B&amp;rsquo;) OR
        (:VARUSERTYPE = &amp;lsquo;A&amp;rsquo;) OR
        (:VARUSERTYPE = &amp;lsquo;C&amp;rsquo; AND U.USER_ID = :VARUSERID))
创建VARUSERTYPE VARUSERID VARVENDORID 三个绑定变量。&lt;/p&gt;
&lt;h4 id="lov-vo"&gt;&lt;i class="icon-folder-open"&gt;&lt;/i&gt; 创建LOV VO&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;LVO的SQL如下:&lt;/strong&gt;
    SELECT NULL         AS USER_ID,
        NULL         AS USER_NAME,
        NULL         AS DESCRIPTION,
        :VARTYPE     AS USERTYPE,&lt;br /&gt;
        :VARVENDORID AS VENDORID,
        :VARUSERID   AS CURRENTUSERID
    FROM DUAL
技巧在这里，LVO同样创建三个绑定变量，并把绑定变量作为VO的attribute暴露出来，然后通过view Accessors传递给基础VO&lt;/p&gt;
&lt;h4 id="view-accessors"&gt;&lt;i class="icon-pencil"&gt;&lt;/i&gt; 设置View Accessors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建LOV    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置View Accessors    &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样就可以实现动态切换LOV的基础数据源了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 17 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2014-09-17:dong-tai-gai-bian-lovde-zhi-ji.html</guid><category>LOV</category></item><item><title>webcenter portal调用document service</title><link>http://dengdezhao.cn/webcenter-portaldiao-yong-document-service.html</link><description>&lt;p&gt;&lt;strong&gt;平台:&lt;/strong&gt; webcenter 1.8&lt;/p&gt;
&lt;h4 id="webcenter-contents"&gt;&lt;i class="icon-file"&gt;&lt;/i&gt; Webcenter Contents端配置&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;步骤:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入webcenter contents http://192.168.15.251:16210/cs/idcplg&lt;/li&gt;
&lt;li&gt;展开administration目录&lt;/li&gt;
&lt;li&gt;Admin Server节点&lt;/li&gt;
&lt;li&gt;Component Manager 里&lt;/li&gt;
&lt;li&gt;开启以下特性&lt;code&gt;FrameworkFolders&lt;/code&gt;(原&lt;code&gt;Floder_g&lt;/code&gt;，已被&lt;code&gt;FrameworkFolders&lt;/code&gt;替代)，&lt;code&gt;WebCenterConfigure&lt;/code&gt;, &lt;code&gt;DynamicConverter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启UCM&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id="webcenter-portal"&gt;&lt;i class="icon-file"&gt;&lt;/i&gt;  Webcenter Portal端配置&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;进入Portal管理界面:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换到Portals标签&lt;/li&gt;
&lt;li&gt;Tools and Services菜单里&lt;/li&gt;
&lt;li&gt;设置Documents服务为enabled即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2014-08-26:webcenter-portaldiao-yong-document-service.html</guid><category>documentservice</category></item><item><title>创建Content Repository时出现错误</title><link>http://dengdezhao.cn/chuang-jian-content-repositoryshi-chu-xian-cuo-wu.html</link><description>&lt;h4 id="content-repository"&gt;&lt;i class="icon-file"&gt;&lt;/i&gt;&lt;strong&gt;创建Content Repository时出现错误：&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unable to load content server metadata model using GET_DOC_METADATA_INFO.&lt;/li&gt;
&lt;li&gt;Permission denied. Address &amp;lsquo;XX.XX.XX.XX&amp;rsquo; is not an allowable remote socket address&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id="_1"&gt;&lt;i class="icon-file"&gt;&lt;/i&gt; &lt;strong&gt;解决方法:&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class="icon-pencil"&gt;&lt;/i&gt; 找到config.cfg   &lt;br /&gt;
&lt;code&gt;/u02/app/oraucm/fmw_home/user_projects/domains/ecm_domain/ucm/cs/config/config.cfg&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class="icon-pencil"&gt;&lt;/i&gt;在SocketHostAddressSecurityFilter值加上&lt;code&gt;|*.*.*.*&lt;/code&gt;
SocketHostAddressSecurityFilter=127.0.0.1|192.168.15.163|&lt;code&gt;*.*.*.*&lt;/code&gt;即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Mon, 25 Aug 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2014-08-25:chuang-jian-content-repositoryshi-chu-xian-cuo-wu.html</guid><category>webcenter</category></item><item><title>OAF个性化Button获取页面参数</title><link>http://dengdezhao.cn/oafge-xing-hua-buttonhuo-qu-ye-mian-can-shu.html</link><description>&lt;ul&gt;
&lt;li&gt;平台: R12    &lt;/li&gt;
&lt;li&gt;需求: 需要个性化一个button的Destination URI属性，并添附上一个参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;本来重写CO便很容易实现该需求，但是涉及到修改代码以及各个环境更新就很麻烦了，所以如果个性化button的URL是最方便了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;个性化又涉及到如何在URL里传递参数的问题。  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;右键当前页面，查看源代码如下：      &lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;form id=&amp;quot;DefaultFormName&amp;quot; name=&amp;quot;DefaultFormName&amp;quot; style=&amp;quot;margin:0px&amp;quot; method=&amp;quot;POST&amp;quot;          action=&amp;quot;/OA_HTML/OA.jsp?page=/oracle/apps/pa/deliverable/webui/CrUpDeliverablePG&amp;amp;paCallingPage=DLVLIST&amp;amp;paCallingMode=VIEW&amp;amp;paProjectId=106691&amp;amp;paDeliverableId=113287&amp;amp;paDlvrItemId=106962&amp;amp;&amp;amp;addBreadCrumb=RP&amp;amp;_ti=1696581738&amp;amp;PersonalizationParam=PersonalizationParamAdmin&amp;amp;retainAM=Y&amp;amp;oapc=28&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要将当前页面中form标签的action属性中的paDlvrItemId参数的值获取过来。拼接成形如:http://dengdezhao.cn?erpid={:paDlvrItemId}形式的URL赋给button的destinationURI属性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用{@itemName}这种方式只能在table控件中才行，在此处不适用。因此考虑使用JS查找当前页面获取到参数然后拼接形成URL。&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;http://192.168.15.141/login/LoginSSO.jsp?flowCode=AM02&amp;amp;erpid=&amp;#39;+unescape(document.DefaultFormName.action.match(new RegExp(&amp;quot;(^|&amp;amp;)&amp;quot; + &amp;#39;paDlvrItemId&amp;#39; + &amp;quot;=([^&amp;amp;]*)(&amp;amp;|$)&amp;quot;, &amp;quot;i&amp;quot;))[2])+&amp;#39;&amp;amp;workcode=&amp;#39; + document.getElementById(&amp;#39;AdditionalInfo&amp;#39;).rows[4].cells[1].innerText + &amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将以上URL个性化赋值给button即可满足需求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 03 Jun 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2014-06-03:oafge-xing-hua-buttonhuo-qu-ye-mian-can-shu.html</guid><category>oaf</category></item><item><title>"安装RCU1.7遇到的小问题"</title><link>http://dengdezhao.cn/an-zhuang-rcu17yu-dao-de-xiao-wen-ti.html</link><description>&lt;ul&gt;
&lt;li&gt;环境：此前安装过soa1.6，最近重新安装soa1.7时遇到的问题&lt;/li&gt;
&lt;li&gt;安装Rcu1.7时，发现无法运行./rcu,错误提示如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
rcuHome/jdk/jre/bin/java: cannot execute binary file.&lt;/p&gt;
&lt;p&gt;查看操作系统发现是32bit,而rcu只有64bit的。&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
$getconf LONG_BIT  &lt;br /&gt;
32  &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;在32bit系统上安装64bit软件向下兼容应该是可以安装的，因此怀疑是jdk的问题。&lt;/p&gt;
&lt;p&gt;修改rcu文件最后几行的jre_home 为中间件文件夹中的JDK：/home/pierre/Oracle/Middleware/jdk160_24/bin/java 后，重新运行即可解决该问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;成功运行rcu之后，进入配置oracle数据库信息页，一直报 invalid service 错误, 原来是service name 要加上机器名后缀 orcl.localdomain即正常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为之前安装过rcu1.6，所以需要将此前的mds删除掉，不然在创建soa domain的时候会出现错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Fri, 18 Apr 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2014-04-18:an-zhuang-rcu17yu-dao-de-xiao-wen-ti.html</guid><category>soa</category></item><item><title>"定制EL function"</title><link>http://dengdezhao.cn/ding-zhi-el-function.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;平台: Jdeveloper 12c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有时需要对字符串进行一些后再显示出来，可以写一个简单的taglib来实现，以下Demo是处理一个以冒号分隔的字符串，返回其中的第三个值。比如输入“aaa:bbb:ccc:ddd&amp;rdquo;，输出&amp;rdquo;ccc&amp;rdquo;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_1"&gt;实现方法&lt;/h4&gt;
&lt;p&gt;创建一个空的java Project：Taglib&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建Java类：SplitString.java    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{% codeblock lang:java %}&lt;/p&gt;
&lt;p&gt;package cn.dengdezhao.taglib;&lt;/p&gt;
&lt;p&gt;public class SplitString {&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;public static String getString(String string) {
    String[] strings = string.split(&amp;quot;:&amp;quot;, 3);
    if (strings.length &amp;gt; 2) {
        return strings[2];
    } else {
        return &amp;quot;&amp;quot;;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;{% endcodeblock %}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建taglib描述文件splitString.tld    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;New -&amp;gt; From Gallery -&amp;gt; Web Tier -&amp;gt; JSP -&amp;gt; JSP Tag Library&lt;/p&gt;
&lt;p&gt;类型为Deployable 文件内容如下：&lt;/p&gt;
&lt;p&gt;{% codeblock lang:xml %}&lt;/p&gt;
&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
&lt;taglib xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"
        version="2.1" xmlns="http://java.sun.com/xml/ns/javaee"&gt;
  &lt;description&gt;split String&lt;/description&gt;
  &lt;display-name&gt;splitString&lt;/display-name&gt;
  &lt;tlib-version&gt;1.0&lt;/tlib-version&gt;
  &lt;short-name&gt;splitString&lt;/short-name&gt;
  &lt;uri&gt;http://www.dengdezhao.cn/string&lt;/uri&gt;
  &lt;function&gt;
    &lt;display-name&gt;getString&lt;/display-name&gt;
    &lt;name&gt;getString&lt;/name&gt;
    &lt;function-class&gt;cn.dengdezhao.taglib.SplitString&lt;/function-class&gt;
    &lt;function-signature&gt;java.lang.String getString(java.lang.String)&lt;/function-signature&gt;
  &lt;/function&gt;
&lt;/taglib&gt;

&lt;p&gt;{% endcodeblock %}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将该工程发布为jar包。即完成taglib的开发工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="taglib"&gt;在工程中应用该taglib&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;创建测试工程ViewController&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;右键工程属性 -&amp;gt; JSP Tag Libraries -&amp;gt; Add&lt;/p&gt;
&lt;p&gt;将之前发布的Jar包添加进来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建测试页面testTaglib.jspx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内容如下 ：&lt;/p&gt;
&lt;p&gt;{% codeblock lang:jsp %}&lt;/p&gt;
&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="2.1" xmlns:f="http://java.sun.com/jsf/core" xmlns:myTag="http://www.dengdezhao.cn/string" 
          xmlns:af="http://xmlns.oracle.com/adf/faces/rich"&gt;
    &lt;jsp:directive.page contentType="text/html;charset=UTF-8"/&gt;
    &lt;f:view&gt;
        &lt;af:document title="testTaglib.jspx" id="d1"&gt;
            &lt;af:form id="f1"&gt;
            &lt;af:outputText id="ot1" value="#{myTag:getString('aaa:ddd:ccc')}"/&gt;
            &lt;/af:form&gt;
        &lt;/af:document&gt;
    &lt;/f:view&gt;
&lt;/jsp:root&gt;

&lt;p&gt;{% endcodeblock %}&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Fri, 07 Feb 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2014-02-07:ding-zhi-el-function.html</guid><category>EL</category></item><item><title>"由意外断电导致oracle11g启动不起来的问题解决"</title><link>http://dengdezhao.cn/you-yi-wai-duan-dian-dao-zhi-oracle11gqi-dong-bu-qi-lai-de-wen-ti-jie-jue.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;平台: linux + oracle 11g    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;故障: 意外断电之后，监听启动不了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_1"&gt;解决方法&lt;/h4&gt;
&lt;p&gt;执行&lt;code&gt;lsnrctrl start&lt;/code&gt;命令时报错误代码如下： &lt;/p&gt;
&lt;p&gt;&lt;code&gt;TNS-12537&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;TNS-12560&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;TNS-00507&lt;/code&gt;  &lt;br /&gt;
&lt;code&gt;Linux Error:29&lt;/code&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;检查/etc/hosts文件，没有发现异常。    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;dl&gt;
&lt;dt&gt;因为未改动任何配置文件，所以基本可以确定是断电造成文件损坏而引起。于是使用&lt;code&gt;relink all&lt;/code&gt;看看能否解决该问题。&lt;/dt&gt;
&lt;dt&gt;{% codeblock lang:java %}&lt;/dt&gt;
&lt;dt&gt;# cd $ORACLE_HOME/bin&lt;/dt&gt;
&lt;dt&gt;# relink all&lt;/dt&gt;
&lt;dt&gt;{% endcodeblock %}&lt;/dt&gt;
&lt;dt&gt;执行&lt;code&gt;relink all&lt;/code&gt;命令之后，再执行&lt;code&gt;lsnrctrl start&lt;/code&gt;时，发现不报之前的错误了，出现了新的错误：&lt;/dt&gt;
&lt;dt&gt;{% codeblock lang:java %}&lt;/dt&gt;
&lt;dt&gt;symbol lookup error: $ORACLE_HOME/lib/libclntsh.so.11.1&lt;/dt&gt;
&lt;dd _="%" endcodeblock="endcodeblock"&gt;undefined symbol: nnftboot&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;看来是这个libclntsh.so.11.1出了问题，于是尝试去下载该文件替换掉。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从RPM search网站上下载到oracle-instance-client的RPM文件到本地。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用rpm2cpio命令抽取出里面的libclntsh.so.11.1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{% codeblock lang:java %}     &lt;/p&gt;
&lt;h1 id="rpm2cpio-oracle-instance-client-xxxrpm-cpio-div"&gt;rpm2cpio oracle-instance-client-xxx.rpm | cpio -div&lt;/h1&gt;
&lt;p&gt;{% endcodeblock %}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将得到的libclntsh.so.11.1文件替换掉$ORACLE_HOME/lib下的重名文件即可。    &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Sat, 09 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-11-09:you-yi-wai-duan-dian-dao-zhi-oracle11gqi-dong-bu-qi-lai-de-wen-ti-jie-jue.html</guid><category>oracle</category></item><item><title>"控件af:iterator以及af:forEach的对比"</title><link>http://dengdezhao.cn/kong-jian-afiteratoryi-ji-afforeachde-dui-bi.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;平台:Jdeveloper 12c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需求：对Collection类型遍历。MB中定义两个List，如何利用iterator&amp;amp;foreach控件将List内容显示到页面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;页面如下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分别绑定iterBean中的两个集合类型变量，将其中的值取出来。&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
&lt;af:iterator id="i1" var="each" value="#{iterBean.list}" varStatus="row"&gt;
    &lt;af:panelBox text="#{each}" id="pb1"&gt;
        &lt;f:facet name="toolbar"/&gt;
        &lt;af:inputText label="Values" id="it1" value="#{iterBean.values[row.index]}"/&gt;
    &lt;/af:panelBox&gt;
&lt;/af:iterator&gt;
&lt;af:forEach items="#{iterBean.testList}"  var="each" varStatus="row"&gt;
  &lt;af:panelBox text="#{each.title}" id="pb2"&gt;
    &lt;af:outputText value="#{row.index} #{each.title}" id="ot1"/&gt;
    &lt;/af:panelBox&gt;
&lt;/af:forEach&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BackingBean内容如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
package cn.dengdezhao;
import java.util.ArrayList;
import java.util.List;
public class IteratorBean {
    List list = new ArrayList();
    String[] values=new String[]{&amp;ldquo;1&amp;rdquo;,&amp;rdquo;2&amp;rdquo;,&amp;rdquo;3&amp;rdquo;};
    List&lt;contentList&gt; testList=new ArrayList&lt;contentList&gt;();&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;public void setTestList(List&amp;lt;contentList&amp;gt; testList) {
    System.out.println(&amp;quot;setTestList...&amp;quot;);
    this.testList = testList;
}
public List&amp;lt;contentList&amp;gt; getTestList() {
    System.out.println(&amp;quot;getTestList...&amp;quot;);

    return testList;
}
public void setValues(String[] values) {
    this.values = values;
}
public String[] getValues() {
    return values;
}
public IteratorBean(){
    list.add(&amp;quot;A&amp;quot;);
    list.add(&amp;quot;B&amp;quot;);
    list.add(&amp;quot;C&amp;quot;);
    contentList a=new contentList();
    a.setTitle(&amp;quot;aaa&amp;quot;);
    testList.add(a);
    contentList b=new contentList();
    b.setTitle(&amp;quot;bbb&amp;quot;);
    testList.add(b);
    contentList c=new contentList();
    c.setTitle(&amp;quot;ccc&amp;quot;);
    testList.add(c);
    System.out.println(&amp;quot;init...&amp;quot;);
}
public void setList(List list) {
    System.out.println(&amp;quot;setList ...&amp;quot;);
    this.list = list;
}
public List getList() {
    System.out.println(&amp;quot;getList...&amp;quot;);
    return list;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public class contentList {
    private String title;&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;public void setTitle(String title) {
    this.title = title;
}

public String getTitle() {
    return title;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p _="%" endcodeblock="endcodeblock"&gt;}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;af:iterator&gt;只调用了一次get方法；
&lt;af:forEach&gt;却调用了9次get方法（根据容器中数量递增）；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;af:iterator&gt;跟&lt;af:forEach&gt;控件都可以对容器类型遍历，只不过iterator是一次性取出容器内容，而forEach是多次取出。两控件都支持下标定位。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Mon, 23 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-09-23:kong-jian-afiteratoryi-ji-afforeachde-dui-bi.html</guid><category>iterator</category><category>foreach</category></item><item><title>"如何在页面碎片加载前调用逻辑"</title><link>http://dengdezhao.cn/ru-he-zai-ye-mian-sui-pian-jia-zai-qian-diao-yong-luo-ji.html</link><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;平台:Jdeveloper 12c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需求：在JSPX页面加载前如果需要调用逻辑可以通过重写PhaseListener实现，如果在JSFF页面碎片加载前（也即是region加载前）调用应该如何实现？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;实现方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重写RegionController方法可以达到以上需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重写 RegionController类，在refreshRegion方法中加入需要调用的逻辑即可在页面碎片加载之前调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{% codeblock lang:java %}
package cn.dengdezhao;
import oracle.adf.model.RegionContext;
import oracle.adf.model.RegionController;
public class myController implements RegionController {
    public myController() {
        super();
    }
    @Override
    public boolean refreshRegion(RegionContext regionContext) {
        // TODO Implement this method
        int flag=regionContext.getRefreshFlag();
        System.out.println(&amp;ldquo;refreshRegion&amp;hellip;&amp;rdquo;);      &lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;    return false;
}
@Override
public boolean validateRegion(RegionContext regionContext) {
    // TODO Implement this method

    return false;
}
@Override
public boolean isRegionViewable(RegionContext regionContext) {
    // TODO Implement this method

    return false;
}
@Override
public String getName() {
    // TODO Implement this method

    return null;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p _="%" endcodeblock="endcodeblock"&gt;}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置页面碎片pagedef页&lt;/li&gt;
&lt;/ul&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:xml %}
&amp;lt;?xml version=&amp;rdquo;1.0&amp;rdquo; encoding=&amp;rdquo;UTF-8&amp;rdquo; ?&amp;gt;
&lt;pageDefinition xmlns="http://xmlns.oracle.com/adfm/uimodel" version="12.1.2.66.68" id="iteratorInputPageDef"
                ControllerClass="cn.dengdezhao.myController"
                Package="cn.dengdezhao.pageDefs"&gt;
  &lt;parameters/&gt;
  &lt;executables&gt;
    &lt;variableIterator id="variables"/&gt;
  &lt;/executables&gt;
  &lt;bindings/&gt;
&lt;/pageDefinition&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过重写regionController类可以实现在页面碎片加载前调用POPUP提示等之类的需求。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Mon, 23 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-09-23:ru-he-zai-ye-mian-sui-pian-jia-zai-qian-diao-yong-luo-ji.html</guid><category>RegionController</category></item><item><title>"如何获取web.xml中的context-param参数"</title><link>http://dengdezhao.cn/ru-he-huo-qu-webxmlzhong-de-context-paramcan-shu.html</link><description>&lt;p&gt;&lt;strong&gt;通过EL表达试获取&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;以web.xml中的&lt;context-param&gt;参数：javax.faces.FACELETS_VIEW_MAPPINGS为例,
可通过以下EL获取。  &lt;br /&gt;
{% codeblock lang:java %}  &lt;br /&gt;
${initParam[&amp;lsquo;javax.faces.FACELETS_VIEW_MAPPINGS&amp;rsquo;]}  &lt;br /&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;如果参数名称很简单，比如：testParameter，EL表达式也可以写成以下方式：   &lt;br /&gt;
{% codeblock lang:java %}  &lt;br /&gt;
${initParam.testParameter}  &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过JAVA代码获取&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;如果需要在MB方法中获取该参数值，可以参照以下代码：
{% codeblock lang:java %}  &lt;br /&gt;
    public String action() {
        FacesContext fctx=FacesContext.getCurrentInstance();
        ExternalContext ec=fctx.getExternalContext();
        ServletContext servletContext=(ServletContext)ec.getContext();
        String value=servletContext.getInitParameter(&amp;ldquo;javax.faces.FACELETS_VIEW_MAPPINGS&amp;rdquo;);
        System.out.println(value);
        return null;
    }&lt;br /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 04 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-09-04:ru-he-huo-qu-webxmlzhong-de-context-paramcan-shu.html</guid><category>context-param</category></item><item><title>"Centos下安装mysql5.6后忘记ROOT密码，重置密码"</title><link>http://dengdezhao.cn/centosxia-an-zhuang-mysql56hou-wang-ji-rootmi-ma-zhong-zhi-mi-ma.html</link><description>&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;去&lt;a href="https://edelivery.oracle.com/EPD/Search/handle_go"&gt;oracle官网&lt;/a&gt;下载mysql5.6 for linux安装介质V38444-01.zip。  &lt;br /&gt;
解压缩之后  &lt;br /&gt;
{% codeblock lang:java %}
MySQL-client-advanced-5.6.12-1.el6.i686.rpm
MySQL-devel-advanced-5.6.12-1.el6.i686.rpm
MySQL-embedded-advanced-5.6.12-1.el6.i686.rpm
MySQL-server-advanced-5.6.12-1.el6.i686.rpm
MySQL-shared-advanced-5.6.12-1.el6.i686.rpm
MySQL-shared-compat-advanced-5.6.12-1.el6.i686.rpm
MySQL-test-advanced-5.6.12-1.el6.i686.rpm&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;开始安装  &lt;br /&gt;
{% codeblock lang:java %}
rpm -ivh MySQL-*&lt;/p&gt;
&lt;p&gt;Mysql5.6的安全机制加强了，默认安装时会随机给ROOT用户生成一个密码保存在安装用户目录下/root/.mysql_secret中。由于没认真看英文文档，我直接安装完就把这个文件里的随机密码给改掉了，就无法得知ROOT初始密码，也无法登录进数据库了，囧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重置Mysql初始密码&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;用ROOT用户登录，STOP数据库 &lt;br /&gt;
{% codeblock lang:java %}
/etc/init.d/mysql stop&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;跳过授权表启动Mysql服务器   &lt;br /&gt;
{% codeblock lang:java %}
mysqld_safe &amp;ndash;skip-grant-tables&amp;amp;  &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;输入CTRL+C中断进程后应该可以看到mysqld已经在运行了    &lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
mysql &amp;ndash;user=root mysql&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;update user set Password=PASSWORD(&amp;lsquo;new-password&amp;rsquo;);
flush privileges;
exit; &lt;/p&gt;
&lt;p&gt;操作完以上变更密码的命令后，可以重启mysqld了。    &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
killall mysqld_safe&amp;amp;  &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;按CTRL+C退出，接着正常启动mysql&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
/etc/init.d/mysql start&lt;/p&gt;
&lt;p&gt;用刚刚修改的新密码登录mysql即可    &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
mysql -uroot -p  &lt;br /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 25 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-06-25:centosxia-an-zhuang-mysql56hou-wang-ji-rootmi-ma-zhong-zhi-mi-ma.html</guid><category>mysql</category></item><item><title>"Attribute set for xxxAttribute in view object xxxVO failed问题解决"</title><link>http://dengdezhao.cn/attribute-set-for-xxxattribute-in-view-object-xxxvo-failedwen-ti-jie-jue.html</link><description>&lt;hr /&gt;
&lt;h2 id="jdeveloper-9i"&gt;平台：Jdeveloper 9i&lt;/h2&gt;
&lt;p&gt;异常描述：     &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;在表增加单选checkbox时，在VO中创建transient属性selector,最终在页面中无法勾选checkbox，发现值没法保存到VO中，页面抛出该异常：&lt;br /&gt;
{% codeblock lang:java %} &lt;br /&gt;
null - Attribute set for Selector in view object employeeVO1 failed&lt;/p&gt;
&lt;p&gt;解决方案：    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查VO中的transient属性selector是否设置为updatable&lt;/li&gt;
&lt;li _="%" endcodeblock="endcodeblock"&gt;如果是在开发模式下，清空所有classes文件，重新编译；如果是在正式环境，删除该路径下的VO对象，可使用以下命令。  &lt;br /&gt;
{% codeblock lang:java %}
exec jdr_utils.deletedocument(&amp;lsquo;/oracle/apps/dengdezhao/test/server/employeeVO&amp;rsquo;);  &lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 19 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-06-19:attribute-set-for-xxxattribute-in-view-object-xxxvo-failedwen-ti-jie-jue.html</guid><category>AttributeSet</category></item><item><title>"从BackingBean中调用不带fragments的taskflow"</title><link>http://dengdezhao.cn/cong-backingbeanzhong-diao-yong-bu-dai-fragmentsde-taskflow.html</link><description>&lt;p&gt;有时候需要在backingBean中调用某一taskflow, 可以使用以下代码调用。不过只适用于可单独运行的taskflow，含有page fragments的taskflow不在此范围。    &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;代码如下：  &lt;br /&gt;
{% codeblock lang:java %}
    public String callTaskFlow() {
        FacesContext fctx = FacesContext.getCurrentInstance();
        ControllerContext cc = ControllerContext.getInstance();
        String taskflowId = &amp;ldquo;btf_task&amp;rdquo;;
        String taskflowDocument = &amp;ldquo;/WEB-INF/btf_task.xml&amp;rdquo;;
        Map&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;();
        TaskFlowId tid = new TaskFlowId(taskflowDocument, taskflowId);
        String taskflowURL = cc.getTaskFlowURL(false, tid, params);
        ExtendedRenderKitService erks =
            Service.getRenderKitService(fctx, ExtendedRenderKitService.class);
        StringBuilder sb = new StringBuilder();
        sb.append(&amp;ldquo;window.open("&amp;rdquo; + taskflowURL +
                  &amp;ldquo;"&amp;ldquo;).append(&amp;ldquo;,"_self");&amp;rdquo;);
        erks.addScript(FacesContext.getCurrentInstance(), sb.toString());
        return null;
    }&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Sat, 08 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-06-08:cong-backingbeanzhong-diao-yong-bu-dai-fragmentsde-taskflow.html</guid><category>taskflow</category></item><item><title>"分页栏出现3个问号BUG解决"</title><link>http://dengdezhao.cn/fen-ye-lan-chu-xian-3ge-wen-hao-bugjie-jue.html</link><description>&lt;hr /&gt;
&lt;p&gt;平台：Jdeveloper 11.1.1.7.0&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;BUG描述&lt;/strong&gt;
标准控件af:table，“页”字前后出现三个问号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因分析&lt;/strong&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;查看LOG文件  &lt;br /&gt;
{% codeblock lang:java %}
&lt;RenderingContext&gt; &lt;getTranslatedString&gt; 无法从外观 mySkin.desktop 获取资源关键字 页  &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;可见是RenderingContext类中getTranslatedString方法发生异常。  &lt;br /&gt;
查看源代码分析：    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找到源代码所在位置&lt;/strong&gt;：  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将JAR包解压得到RenderingContext类，反编译查看&lt;/strong&gt;    &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;结果如下&lt;strong&gt;RenderingContext.class&lt;/strong&gt;：  &lt;br /&gt;
{% codeblock lang:java %}
  public String getTranslatedString(String key)
  {
    if (key == null)
      return null;
    try
    {
      return getSkin().getTranslatedString(getLocaleContext(), key);
    }
    catch (MissingResourceException mre)
    {
      _LOG.severe(&amp;ldquo;CANNOT_GET_RESOURCE_KEY&amp;rdquo;, new String[] { key, getSkin().getId() }); }
    return &amp;ldquo;???&amp;rdquo; + key + &amp;ldquo;???&amp;rdquo;;
  }&lt;/p&gt;
&lt;p&gt;可知在调用getTranslatedString获取Resource时，发生MissingResourceException异常所以返回了带&amp;rdquo;???&amp;rdquo;+Key+&amp;rdquo;???&amp;rdquo;字样的字符串。    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据以上分析基本可知出现问号的原因是在获取resourcebundle时，找不到Key为页的resource，所以直接返回了&amp;rdquo;???&amp;rdquo; + key + &amp;ldquo;???&amp;rdquo;，就出现分页显示出现问号的BUG。    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案一：&lt;/strong&gt;重写ResourceBundle类，增加KEY值为“页”的资源。
步骤如下：    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;创建SkinBundle类 extends ListResourceBundle   &lt;br /&gt;
{% codeblock lang:java %}
package cn.dengdezhao.bundle
public class SkinBundle extends ListResourceBundle {
    @Override
    public Object[][] getContents() {
        System.out.println(&amp;ldquo;executing&amp;hellip;&amp;rdquo;);
        return  new Object[][]{ { &amp;ldquo;页&amp;rdquo;, &amp;ldquo;页&amp;rdquo; } };
    }
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;创建trinidad-skins.xml文件注册定制化Skin  &lt;br /&gt;
{% codeblock lang:xml %}
&amp;lt;?xml version=&amp;rdquo;1.0&amp;rdquo; encoding=&amp;rdquo;UTF-8&amp;rdquo;?&amp;gt;
&lt;skins xmlns="http://myfaces.apache.org/trinidad/skin"&gt;
    &lt;skin&gt;
        &lt;id&gt;mySkin.desktop&lt;/id&gt;
        &lt;family&gt;mySkin&lt;/family&gt;
        &lt;extends&gt;skyros-v1.desktop&lt;/extends&gt; 
        &lt;render-kit-id&gt;org.apache.myfaces.trinidad.desktop&lt;/render-kit-id&gt;
        &lt;style-sheet-name&gt;css/mySkin.css&lt;/style-sheet-name&gt;
        &lt;bundle-name&gt;cn.dengdezhao.bundle.SkinBundle&lt;/bundle-name&gt;
        &lt;!--&lt;bundle-name&gt;ApplicationBundle&lt;/bundle-name&gt;--&gt;
    &lt;/skin&gt;
&lt;/skins&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;修改trinidad-config.xml文件如下：  &lt;br /&gt;
{% codeblock lang:xml %}
&amp;lt;?xml version=&amp;rdquo;1.0&amp;rdquo; encoding=&amp;rdquo;UTF-8&amp;rdquo;?&amp;gt;
&lt;trinidad-config xmlns="http://myfaces.apache.org/trinidad/config"&gt;
  &lt;skin-family&gt;mySkin&lt;/skin-family&gt;
&lt;/trinidad-config&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建css/mySkin.css文件（内容默认CSS即可）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行即发现问号消失。&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;方案二：&lt;/strong&gt;其实原理跟方案一一样，也是通过改resourcebundle实现。resourcebundle支持三种类型，一种是以上的扩展ListResourceBundle类实现，一种是通过配置文件properties实现，另外一种是xliff实现。也可创建一个ApplicationBundle.properties文件，内容如下:  &lt;br /&gt;
{% codeblock lang:java %}
页 = 页&lt;/p&gt;
&lt;p&gt;trinidad-skins.xml里的bundle-name节点设置成ApplicationBundle也可实现同样效果。&lt;/p&gt;
&lt;p&gt;定制CSS可参照[&amp;ldquo;定制CSS&amp;rdquo;]&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Thu, 06 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-06-06:fen-ye-lan-chu-xian-3ge-wen-hao-bugjie-jue.html</guid><category>ADF</category></item><item><title>"Groovy在ADF中的应用"</title><link>http://dengdezhao.cn/groovyzai-adfzhong-de-ying-yong.html</link><description>&lt;p&gt;使用Groovy脚本，在开发ADF应用中可以极大地提高开发效率，实现某些看似很复杂的功能。&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;比如在empVO中获取sequence值:  &lt;br /&gt;
{% codeblock lang:java %}
db = adf.object.getDBTransaction()  &lt;br /&gt;
sq = new oracle.jbo.server.SequenceImpl(&amp;ldquo;EMPLOYEES_SEQ&amp;rdquo;,db)  &lt;br /&gt;
sq.getSequenceNumber()  &lt;br /&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;在empVO中获取Salary字段最大值max：&lt;/strong&gt;  &lt;br /&gt;
{% codeblock lang:java %}
adf.object.getRowSet().max(&amp;ldquo;Salary&amp;rdquo;)&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;在empVO中获取Salary字段最小值min：&lt;/strong&gt;  &lt;br /&gt;
{% codeblock lang:java %}
adf.object.getRowSet().min(&amp;ldquo;Salary&amp;rdquo;)&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;在empVO中获取Salary字段合计sum：&lt;/strong&gt;  &lt;br /&gt;
{% codeblock lang:java %}
adf.object.getRowSet().sum(&amp;ldquo;Salary&amp;rdquo;)&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;在empVO中获取Salary字段均值avg：&lt;/strong&gt;  &lt;br /&gt;
{% codeblock lang:java %}
adf.object.getRowSet().avg(&amp;ldquo;Salary&amp;rdquo;)&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;在empVO中获取Salary字段数量count：&lt;/strong&gt;  &lt;br /&gt;
{% codeblock lang:java %}
adf.object.getRowSet().count(&amp;ldquo;Salary&amp;rdquo;)&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;import JAVA类库&lt;/strong&gt;  &lt;br /&gt;
导入SimpleDateFormat类，对当前日期格式化成String对象输出  &lt;br /&gt;
{% codeblock lang:java %}
import java.text.SimpleDateFormat
df = new SimpleDateFormat(&amp;ldquo;yyyy-MM-dd&amp;rdquo;)
df.format(adf.currentDate)&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;获取当前行中Attribute值&lt;/strong&gt;  &lt;br /&gt;
{% codeblock lang:java %}
source.Salary 
source.getAttribute(&amp;ldquo;Salary&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用EntityImpl中的方法&lt;/strong&gt; &lt;br /&gt;
在EntityImpl中定义的方法均可以通过&lt;strong&gt;adf.object&lt;/strong&gt;.yourMethod()方式调用  &lt;br /&gt;
其它如：  &lt;br /&gt;
&lt;strong&gt;adf.object.entityState&lt;/strong&gt;  &lt;br /&gt;
&lt;strong&gt;adf.object.postState&lt;/strong&gt;  &lt;br /&gt;
&lt;strong&gt;adf.userSession&lt;/strong&gt; //获得Session &lt;br /&gt;
&lt;strong&gt;adf.context&lt;/strong&gt; //获得AdfContext对象     &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;调用AM中的自定义方法getHelloWorld()&lt;/strong&gt;  &lt;br /&gt;
{% codeblock lang:java %}
structureDef.getApplicationModule().getHelloWorld()&lt;/p&gt;
&lt;p&gt;Groovy脚本的用处还有很多，以上只是总结了部分常用的调用方法。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Sun, 02 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-06-02:groovyzai-adfzhong-de-ying-yong.html</guid><category>groovy</category></item><item><title>"利用contextual event刷新Region"</title><link>http://dengdezhao.cn/li-yong-contextual-eventshua-xin-region.html</link><description>&lt;p&gt;平台： Jdev 11.1.1.7.0  &lt;br /&gt;
需求：两个region，其中一个region对数据进行修改后，需要刷新另外一个region显示   &lt;/p&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;h4 id="bound-taskflow-btf_form"&gt;创建bound taskflow: btf_form&lt;/h4&gt;
&lt;p&gt;&lt;img alt="../../../wp-content/uploads/QQ截图20130601204146.jpg" src="../../../wp-content/uploads/QQ截图20130601204146.jpg" /&gt;    &lt;/p&gt;
&lt;p&gt;taskflow只包括一个页面碎片empForm.jsff，拖入employeeVO生成af:Form。  &lt;br /&gt;
&lt;img alt="../../../wp-content/uploads/QQ截图20130601210114.jpg" src="../../../wp-content/uploads/QQ截图20130601210114.jpg" /&gt;    &lt;/p&gt;
&lt;h3 id="bound-taskflow-btf_table"&gt;创建bound taskflow: btf_table&lt;/h3&gt;
&lt;p&gt;同上，只有一个页面碎片empTable.jsff，拖入employeeVO生成af:table。   &lt;br /&gt;
&lt;img alt="../../../wp-content/uploads/QQ截图20130601210258.jpg" src="../../../wp-content/uploads/QQ截图20130601210258.jpg" /&gt;        &lt;/p&gt;
&lt;p&gt;以上两个taskflow皆使用No Controller Transaction.&lt;/p&gt;
&lt;h4 id="contextual-event"&gt;添加contextual event&lt;/h4&gt;
&lt;p&gt;需要在empTable.jsff页面中修改数据，单击commit按钮时，让empForm.jsff页面中的数据即时更新。因此，给commitbutton添加contextual event: saveEvent。  &lt;br /&gt;
&lt;img alt="../../../wp-content/uploads/QQ截图20130601210725.jpg" src="../../../wp-content/uploads/QQ截图20130601210725.jpg" /&gt;    &lt;/p&gt;
&lt;h4 id="mainpgtaskflowregion"&gt;创建mainPG页面引入以上taskflow生成region&lt;/h4&gt;
&lt;p&gt;创建一个两栏jspx页面mainPG.jspx， 分别拖入以上两taskflow生成region。  &lt;br /&gt;
给contextual event 绑定consumer。    &lt;/p&gt;
&lt;p&gt;切换到mainPG.jspx页面的pagedef页面，从structure窗口中执行以下操作；  &lt;br /&gt;
&lt;img alt="../../../wp-content/uploads/QQ截图20130601211338.jpg" src="../../../wp-content/uploads/QQ截图20130601211338.jpg" /&gt;    &lt;/p&gt;
&lt;p&gt;&lt;img alt="../../../wp-content/uploads/QQ截图20130601211438.jpg" src="../../../wp-content/uploads/QQ截图20130601211438.jpg" /&gt;    &lt;/p&gt;
&lt;p&gt;producer即为contextual event的事件源，由btf_table中的commitbutton产生，consumer即为btf_form中的execute消耗，即btf_table中每commit一次，btf_form即执行一次execute操作刷新页面。&lt;/p&gt;
&lt;p&gt;以上只是简单了解下contextual event的工作原理，contextual event还可以带参在region之间传值等。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Sat, 01 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-06-01:li-yong-contextual-eventshua-xin-region.html</guid><category>region</category></item><item><title>"在ManagedBean中调用AppModuleImpl中自定义方法的两种方式"</title><link>http://dengdezhao.cn/zai-managedbeanzhong-diao-yong-appmoduleimplzhong-zi-ding-yi-fang-fa-de-liang-chong-fang-shi.html</link><description>&lt;hr /&gt;
&lt;h2 id="jdev111170"&gt;平台: Jdev11.1.1.7.0&lt;/h2&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li _="%" endcodeblock="endcodeblock"&gt;&lt;strong&gt;&lt;em&gt;*AM&lt;/em&gt;&lt;/strong&gt;*中创建自定义方法sayHello  &lt;br /&gt;
{% codeblock lang:java %}
    public void sayHello(String value){
        System.out.println(&amp;ldquo;hello world&amp;hellip;&amp;rdquo;+value);
    }&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;暴露该方法以便在ManagedBean中调用    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从Data Controls中将该方法拖到页面生成Bindings或者手工添加该Bindings。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了测试方便，创建了一个inputText，并绑定该inputText的valueChangeListener为ManagedBean中的valueChange方法.  &lt;br /&gt;
{% codeblock lang:java %}
    public void valueChange(ValueChangeEvent valueChangeEvent) {
        String newValue = valueChangeEvent.getNewValue().toString();
        //方法一：调用bindings
        BindingContainer bindings = ADFUtils.getBindingContainer();              &lt;br /&gt;
        OperationBinding refreshChecklist = bindings.getOperationBinding(&amp;ldquo;sayHello&amp;rdquo;);
        refreshChecklist.getParamsMap().put(&amp;ldquo;value&amp;rdquo;, newValue); 
        refreshChecklist.execute();&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;//方法二：直接调用AM，通过AM调用该方法
AppModuleImpl am = (AppModuleImpl)ADFUtils.
getApplicationModuleForDataControl(&amp;quot;AppModuleDataControl&amp;quot;);
am.sayHello(newValue);
&lt;/pre&gt;&lt;/div&gt;


&lt;p _="%" endcodeblock="endcodeblock"&gt;}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上两种方式均可以调用AM中的自定义方法。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Sat, 01 Jun 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-06-01:zai-managedbeanzhong-diao-yong-appmoduleimplzhong-zi-ding-yi-fang-fa-de-liang-chong-fang-shi.html</guid><category>AppModuleImpl</category></item><item><title>"关于ApplicatoinModule类型总结"</title><link>http://dengdezhao.cn/guan-yu-applicatoinmodulelei-xing-zong-jie.html</link><description>&lt;h2 id="jdev111230"&gt;平台：Jdev11.1.2.3.0&lt;/h2&gt;
&lt;h4 id="am"&gt;AM的类型&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1. Root AM&lt;/strong&gt;  &lt;br /&gt;
&lt;strong&gt;2. Nested AM&lt;/strong&gt;  &lt;br /&gt;
&lt;strong&gt;3. Shared AM&lt;/strong&gt;    &lt;/p&gt;
&lt;h4 id="am_1"&gt;三种类型AM的比较&lt;/h4&gt;
&lt;p&gt;首先谈谈RootAM的数量，RootAM原则上来说越少越好，因为当用户访问工程的时候数据库连接数量会根据RootAM的数量成倍增加极大地增加了数据库的压力。但是很多时候由于业务的复杂性，单一的AM无法满足实际开发的需求，所有的业务逻辑都写在一个AM里极不利于多个团队的协同开发。  &lt;br /&gt;
这个时候NestedAM就发挥其作用了，NestedAM是共享其父类RootAM的数据库连接的，所以不会额外增加连接数量，利用NestedAM可以将业务逻辑拆分开来，每个团队都可以使用自己单独的NestedAM，团队之间彼此冲突地可能性大大减少。
再说SharedAM，大型项目中很多模块的功能是通用的，比如LOV或者一些在使用中基本不需要改变的固定配置数据等，这类数据对项目所有访问用户都是固定的，可以使用SharedAM来维护这类型数据。&lt;/p&gt;
&lt;h4 id="am_2"&gt;三种类型的AM的创建方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;RootAM,默认创建的AM即是RootAM    &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NestedAM创建方法  &lt;br /&gt;
   先创建两个RootAM(deptAm,empAm)，分别拥有VO instance（DeptVO,EmpVO)；  &lt;br /&gt;
再创建一个RootAM（rootAM)，双击该rootAM，在Data Model标签页中，展开Application Module Instances节点，如下图所示添加deptAm,empAM为该rootAM的NestedAM。  &lt;br /&gt;
&lt;img alt="../../../wp-content/uploads/QQ截图20130528145149.jpg" src="../../../wp-content/uploads/QQ截图20130528145149.jpg" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建SharedAM的方法更为简单，在上面创建好RootAM之后，右键该Model工程属性，切换到ADF Business Components-Application Module标签页，如下图所示添加SharedAM，SharedAM有两种级别，一种是Application级别的，一种是Session级别的，可根据实际需要将该AM设置为Applicatoin或者是Session级别，二选一。    &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="../../../wp-content/uploads/QQ截图20130528150742.jpg" src="../../../wp-content/uploads/QQ截图20130528150742.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;PS：基于多DB连接的多AM创建可参考前一博文&lt;a href="../../../blog/2013-05-23/adfchuang-jian-liang-ge-amji-yu-bu-tong-de-dblian-jie/"&gt;&amp;ldquo;ADF创建两个AM基于不同的DB连接&amp;rdquo;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 28 May 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-05-28:guan-yu-applicatoinmodulelei-xing-zong-jie.html</guid><category>am</category></item><item><title>"ADF类似心跳程序实现"</title><link>http://dengdezhao.cn/adflei-si-xin-tiao-cheng-xu-shi-xian.html</link><description>&lt;p&gt;使用ADF框架开发WEB应用时，其中令人苦恼的一个需求就是：在两个页面同时展示一个数据源时，如果其中一个页面对数据源作了变更操作，另外一个页面没办法自动获得变更后的数据，需要手工刷新页面才能得到变更后的新数据源。   &lt;/p&gt;
&lt;p&gt;其实ADF自带的&lt;code&gt;&amp;lt;af:poll/&amp;gt;&lt;/code&gt;组件即可实现此需求。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个可更新的af:table 基于HR的Department表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以更改表数据并提交，用多浏览器窗口打开该页面来模拟多用户操作。&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;&amp;lt;af:poll/&amp;gt;&lt;/code&gt;控件拖入到页面中，控件属性设置如下：    &lt;/p&gt;
&lt;p&gt;设置间隔为1分钟，并绑定PollListener&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给该页面绑定ManagedBean，并添加PollListener，方法内容如下：    &lt;/li&gt;
&lt;/ul&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
    public void heartBeat(PollEvent pollEvent) {
        System.out.println(&amp;ldquo;start poll&amp;hellip;&amp;rdquo;);      &lt;br /&gt;
        DCIteratorBinding it = ADFUtils.findIterator(&amp;ldquo;Departments1Iterator&amp;rdquo;);
        ViewObject vo = it.getViewObject();
        vo.executeQuery();
        AdfFacesContext.getCurrentInstance().addPartialTarget(JSFUtils.findComponentInRoot(&amp;ldquo;t1&amp;rdquo;));
       }&lt;/p&gt;
&lt;p&gt;每隔1分钟自动查询一次VO，并将更新后的内容返回到页面；    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这样打开两个页面之后，在其中一个页面更改内容并提交后，也会即时更新另外一个页面（另外一个客户端）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS：此例子频繁地查询VO，在实际项目中会对服务器造成很大的压力，只为展示&lt;code&gt;&amp;lt;af:poll&amp;gt;&lt;/code&gt;控件作用，不建议使用此方案。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 24 Apr 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-04-24:adflei-si-xin-tiao-cheng-xu-shi-xian.html</guid><category>poll</category></item><item><title>"ADF学习总结(一)"</title><link>http://dengdezhao.cn/adfxue-xi-zong-jie-yi.html</link><description>&lt;h4 id="vo"&gt;改变VO查询条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用WhereClause改变查询条件&lt;/li&gt;
&lt;li&gt;使用Criteria改变查询条件&lt;/li&gt;
&lt;li&gt;使用Bind Variables改变查询条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="whereclause"&gt;使用WhereClause改变查询条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;setWhereClause&lt;/strong&gt;    &lt;/li&gt;
&lt;/ul&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;通过VO对象的setWhereClause方法改变查询条件
{% codeblock lang:java %}
DCIteratorBinding dc = ADFUtils.findIterator(&amp;ldquo;DepartmentsView1Iterator&amp;rdquo;);  &lt;br /&gt;
ViewObject vo = dc.getViewObject();     &lt;br /&gt;
vo.setWhereClause(&amp;rdquo; 1=1 &amp;ldquo;);  &lt;br /&gt;
vo.executeQuery();   &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;addWhereClause&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;addWhereClause是在原有whereClause基础上添加新的查询条件；  &lt;br /&gt;
跟setWhereClause替换原有whereClaue不同；&lt;/p&gt;
&lt;h4 id="viewcriteria"&gt;使用ViewCriteria改变查询条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用定义好的ViewCriteria&lt;/strong&gt;    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事先在创建VO的时候，定义好几种Criteria：DepartmentsViewCriteria    &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
DCIteratorBinding dc = ADFUtils.findIterator(&amp;ldquo;DepartmentsView1Iterator&amp;rdquo;);      &lt;br /&gt;
ViewObject vo = dc.getViewObject();         &lt;br /&gt;
ViewCriteriaManager vcm=vo.getViewCriteriaManager();  &lt;br /&gt;
vo.applyViewCriteria(vcm.getViewCriteria(&amp;ldquo;DepartmentsViewCriteria&amp;rdquo;));   &lt;br /&gt;
vo.executeQuery();   &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态创建ViewCriteria&lt;/strong&gt;    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果事先没有在VO中定义好ViewCriteria，也可以在MB代码中动态创建    &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
DCIteratorBinding dc = ADFUtils.findIterator(&amp;ldquo;DepartmentsView1Iterator&amp;rdquo;);  &lt;br /&gt;
ViewObject vo = dc.getViewObject();  &lt;br /&gt;
ViewCriteria vc = vo.createViewCriteria();  &lt;br /&gt;
ViewCriteriaRow vcr = vc.createViewCriteriaRow();  &lt;br /&gt;
vcr.setConjunction(ViewCriteriaRow.VC_CONJ_AND);  &lt;br /&gt;
vcr.setAttribute(&amp;ldquo;DepartmentId&amp;rdquo;, &amp;ldquo;20&amp;rdquo;);  &lt;br /&gt;
vc.add(vcr);  &lt;br /&gt;
vo.applyViewCriteria(vc);  &lt;br /&gt;
vo.executeQuery();      &lt;br /&gt;&lt;/p&gt;
&lt;h4 id="bind-variables"&gt;使用Bind Variables改变查询条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用Bind Variables结合ViewCriteria&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参照以上定义ViewCriteria时，使用Bind Variables。    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用Bind Variables结合SQL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在VO的SQL中使用Bind Variables；    &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:sql %}
SELECT Departments.DEPARTMENT_ID, 
       Departments.DEPARTMENT_NAME, 
       Departments.MANAGER_ID, 
       Departments.LOCATION_ID
FROM DEPARTMENTS Departments
WHERE Departments.DEPARTMENT_ID = :varDeptId&lt;/p&gt;
&lt;p&gt;创建Bind Variables：varDeptId    &lt;/p&gt;
&lt;p&gt;在查询VO时，通过如下代码控制即可实现：    &lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
DCIteratorBinding dc = ADFUtils.findIterator(&amp;ldquo;DepartmentsView1Iterator&amp;rdquo;);  &lt;br /&gt;
ViewObject vo = dc.getViewObject();  &lt;br /&gt;
ViewCriteria vc = vo.createViewCriteria();  &lt;br /&gt;
vo.setNamedWhereClauseParam(&amp;ldquo;varDeptId&amp;rdquo;, 20);  &lt;br /&gt;
vo.executeQuery();        &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;以上几种方法均可实现改变VO查询条件进行动态查询，各有灵活度，目前没有比较三种方式带来的性能影响，可以根据个人习惯采用。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Fri, 19 Apr 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-04-19:adfxue-xi-zong-jie-yi.html</guid><category>ViewCriteria</category></item><item><title>"OAF中创建LOV"</title><link>http://dengdezhao.cn/oafzhong-chuang-jian-lov.html</link><description>&lt;p&gt;环境：Oracle9i Jdeveloper+R11i&lt;/p&gt;
&lt;h4 id="am"&gt;首先创建AM&lt;/h4&gt;
&lt;p&gt;创建一个LovAM，默认配置即可。&lt;/p&gt;
&lt;h4 id="vo"&gt;创建VO&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;创建LovVO，不需要基于EO，输入查询SQL如下：
{% codeblock lang:sql %}
select distinct INVENTORY_ITEM_ID,concatenated_segments 
from MTL_SYSTEM_ITEMS_KFV where organization_id=85&lt;/p&gt;
&lt;p&gt;将创建好的VO添加到AM的data module中&lt;/p&gt;
&lt;h4 id="rn"&gt;创建RN&lt;/h4&gt;
&lt;p&gt;右键工程，创建一个RN，Scope设置为public.    &lt;/p&gt;
&lt;p&gt;选中创建好的LovRN.xml，在structure Window窗口中选中LovRN右建New Region Using Wizard.找到之前创建的LovVO.    &lt;/p&gt;
&lt;p&gt;修改字段属性如下：   &lt;br /&gt;
Search Allowed : true   &lt;br /&gt;
Selective Search Criteria : true    &lt;/p&gt;
&lt;h4 id="pglov"&gt;创建PG页面引用LOV&lt;/h4&gt;
&lt;p&gt;创建一个PG页面LovPG.xml，AM Definition设置为之前创建的LovAM路径;  &lt;br /&gt;
Windows title &amp;amp; tile 随意设置；  &lt;br /&gt;
在LovPG页面中创建一个Region改名为mainRN，Region Style为messageComponentLayout;  &lt;br /&gt;
在mainRN中创建一个MessageLovInput控件item1，    修改item1的属性External LOV值为此前步骤中创建好的LovRN路径；
prompt改为：物料LOV  &lt;br /&gt;
lovMap1中，设置Lov Region Item 为InventoryItemId;     Return Item为item1;Criteria Item为item1;  &lt;br /&gt;
运行该lovPG.xml，即可&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Thu, 18 Apr 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-04-18:oafzhong-chuang-jian-lov.html</guid><category>oaf</category></item><item><title>"配置OAF开发环境"</title><link>http://dengdezhao.cn/pei-zhi-oafkai-fa-huan-jing.html</link><description>&lt;h4 id="ebsoa"&gt;查看EBS系统OA版本信息&lt;/h4&gt;
&lt;p&gt;方法一：使用OPERATIONS用户登陆EBS系统，选择“Diagnostics”后，在页下脚选择“About this Page”后选择“Technology Components”标签可查看相应版本信息。&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;方法二：访问URI：&lt;em&gt;R12不可用&lt;/em&gt;  &lt;br /&gt;
{% codeblock lang:java %}
http://&lt;HOST&gt;:&lt;PORT&gt;/OA_HTML/OAInfo.jsp  &lt;br /&gt;&lt;/p&gt;
&lt;h4 id="oafjdev"&gt;查看OAF版本下载相应JDEV开发工具&lt;/h4&gt;
&lt;p&gt;metalink document id: 787209.1 &amp;amp; 416708.1&lt;/p&gt;
&lt;p&gt;例如：p4141787_11i_GENERIC.zip&lt;/p&gt;
&lt;p&gt;解压缩后把“/jdevhome/jdev”路径加到系统变量中，变量名：      JDEV_USER_HOME=F:\p4141787_11i_GENERIC\jdevhome\jdev&lt;/p&gt;
&lt;h4 id="dbc"&gt;配置DBC文件&lt;/h4&gt;
&lt;p&gt;确认当前EBS系统使用的dbc文件.&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;连接EBS数据库，执行以下SQL查询：
{% codeblock lang:sql %}
select host_name||&amp;rsquo;_&amp;rsquo;||instance_name from v$instance;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;telnet到EBS系统，查找dbc文件的的位置并拷贝下来放在jdevhome\jdev\dbc_files\secure目录下:  &lt;br /&gt;
{% codeblock lang:java %}
ls –a|$FND_SECURE/*.dbc&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;检验DBC文件是否EBS系统正在使用的DBC可用以下命令：  &lt;br /&gt;
{% codeblock lang:java %}
java oracle.apps.fnd.security.AdminAppServer apps/apps STATUS DBC=/u01/dev/devappl/fnd/11.5.0/secure/SIT.dbc&lt;/p&gt;
&lt;p&gt;确认系统是否使用这个dbc文件可以在路径
$APPL_TOP/admin/[SID]_[host].xml
查找_dbc_file_name，跟上面说的dbc文件一致即可&lt;/p&gt;
&lt;h4 id="jdev"&gt;配置JDEV工程属性&lt;/h4&gt;
&lt;p&gt;以上准备工作都完成之后，配置JDEV的Preferences中编码为UTF-8    &lt;/p&gt;
&lt;p&gt;配置project setting中编译器编码    &lt;/p&gt;
&lt;p&gt;然后配置DBC文件路径，测试EBS账户名及密码，所属职责等.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 17 Apr 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-04-17:pei-zhi-oafkai-fa-huan-jing.html</guid><category>oaf</category></item><item><title>"getRowAtRangeIndex(int)方法的局限性"</title><link>http://dengdezhao.cn/getrowatrangeindexintfang-fa-de-ju-xian-xing.html</link><description>&lt;p _="%" endcodeblock="endcodeblock"&gt;导出VO中的数据到EXCEL中时，循环VO中的Row，写入HSSFRow，是通过getRowAtRangeIndex(int)方法循环取Row，代码如下：  &lt;br /&gt;
{% codeblock lang:java %}
 ViewObject vo8=am.findViewObject(&amp;ldquo;ChReport1VO1&amp;rdquo;);
 if(vo8!=null)
 {
      int rowcount8=vo8.getRowCount();
      for(int i=0;i&amp;lt;rowcount8;i++)
      {
           Row vo_row8=vo8.getRowAtRangeIndex(i);
           //&amp;hellip;TODO
      }
 }&lt;/p&gt;
&lt;p&gt;这样如果VO里有300条数据，但是pageRange设置为100，这里其实只能取到第一页的100条数据，想要导出所有300条数据则需要一页一页导出，很麻烦。于是考虑不用getRowAtRangeIndex方法取ROW数据,改用RowSetIterator。&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
ViewObject vo8=am.findViewObject(&amp;ldquo;ChReport1VO1&amp;rdquo;);
if(vo8!=null)
{
     int rowcount8=vo8.getRowCount();
     RowSetIterator rowSetIter=vo8.createRowSetIterator(null);&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt; for(int i=0;i&amp;lt;rowcount8;i++)
 {
       Row vo_row8=rowSetIter.next();
       //...TODO
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p _="%" endcodeblock="endcodeblock" lang:java="lang:java"&gt;}&lt;/p&gt;
&lt;p&gt;getRowAtRangeIndex方法只能通过index取出Range中的数据,但是RowSetIterator则是对VO中所有RowSet遍历。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 16 Apr 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-04-16:getrowatrangeindexintfang-fa-de-ju-xian-xing.html</guid><category>excel</category></item><item><title>"OAF上传大批量EXCEL文件"</title><link>http://dengdezhao.cn/oafshang-chuan-da-pi-liang-excelwen-jian.html</link><description>&lt;p&gt;客户有个需求：大量数据通过EXCEL导入系统表，并能提供效验及去重功能。&lt;/p&gt;
&lt;h4 id="_1"&gt;设计思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;采用POI解析EXCEL文件；&lt;/li&gt;
&lt;li&gt;bulk insert 插入数据到临时表&lt;/li&gt;
&lt;li&gt;临时表结合正式表去除重复&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="poiexcel"&gt;POI解析EXCEL&lt;/h4&gt;
&lt;p&gt;在CO的&lt;code&gt;processFormRequest&lt;/code&gt;方法中添加如下:  &lt;br /&gt;
{% codeblock lang:java %}
  public void processFormRequest(OAPageContext pageContext, OAWebBean webBean)
  {
    super.processFormRequest(pageContext, webBean);
    OAApplicationModule am = pageContext.getApplicationModule(webBean);&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;if (pageContext.getParameter(&amp;quot;uploadBtn&amp;quot;) != null)
{
  DataObject fileUploadData = (DataObject)pageContext.getNamedDataObject(&amp;quot;uploadFile&amp;quot;);
  String fileName = null;
  try {
    fileName = (String)fileUploadData.selectValue(null, &amp;quot;UPLOAD_FILE_NAME&amp;quot;);
  } catch(NullPointerException ex)
  {
    throw new OAException(&amp;quot;请先选择需要上传的文件&amp;quot;, OAException.INFORMATION);
  }

  if(fileName.endsWith(&amp;quot;.xlsx&amp;quot;))
  {
            throw new OAException(&amp;quot;不支持高版本EXCEL文件,请转换成2003版本的EXCEL再上传&amp;quot;,OAException.WARNING);
  }else if(!fileName.endsWith(&amp;quot;.xls&amp;quot;))
  {
            throw new OAException(&amp;quot;请上传EXCEL类型文件&amp;quot;,OAException.ERROR);
  }

  BlobDomain uploadedByteStream = (BlobDomain)fileUploadData.selectValue(null, fileName);
  Serializable aserializable2[] = {uploadedByteStream};
  Class aclass2[] = {BlobDomain.class };
  am.invokeMethod(&amp;quot;importFile&amp;quot;, aserializable2,aclass2);   
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p _="%" endcodeblock="endcodeblock"&gt;}&lt;/p&gt;
&lt;h4 id="amimportfile"&gt;在AM中编写importFile方法&lt;/h4&gt;
&lt;p&gt;{% codeblock lang:java %}
  public void importFile(BlobDomain fileData) 
  {
    InputStream inStr = fileData.getInputStream();
    HSSFWorkbook workbook=null;
    try{
     workbook= new HSSFWorkbook(inStr);
    }catch(java.io.IOException e)
    {
      throw new OAException(&amp;ldquo;读取上传的文件出错,请检查上传的文件是否为97-2003版本的EXCEL可读文件.&amp;rdquo;,OAException.ERROR);
    }
    //信号1
    if(workbook==null)
    {
      throw new OAException(&amp;ldquo;ERROR001:workbook为空,请重新上传文件.&amp;rdquo;,OAException.ERROR);
    }
    HSSFSheet sheet1 = workbook.getSheet(&amp;ldquo;1&amp;rdquo;);
    if(sheet1==null)
    {
      throw new OAException(&amp;ldquo;ERROR002:sheet1为空,上传文件中找不到名字为&amp;lsquo;1&amp;rsquo;的工作表,请检查工作表命名是否符合规则.&amp;rdquo;,OAException.ERROR);
    }
    int rowCount1 = sheet1.getLastRowNum();
    int realCount1=0;&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;Object[] o_vin1=new Object[rowCount1],
o_type1=new Object[rowCount1],
o_color1=new Object[rowCount1],
o_date1=new Object[rowCount1],
o_des1=new Object[rowCount1];
String vin1=null,type1=null,color1=null;
java.util.Date vdate1=null;
for (int r1=1; r1 &amp;lt;= rowCount1; r1++)
{
  HSSFRow tempRow1=sheet1.getRow(r1);
  if(tempRow1==null)
  {
    throw new OAException(&amp;quot;INFO:sheet[1]中第&amp;quot;+(r1+1)+&amp;quot;行数据异常,请检查上传文件&amp;quot;,OAException.INFORMATION);
  }
  if(tempRow1.getCell((short)0)==null||tempRow1.getCell((short)0).getStringCellValue()==null||&amp;quot;&amp;quot;.equals(tempRow1.getCell((short)0).getStringCellValue().trim()))
  {
    throw new OAException(&amp;quot;INFO:sheet[1]中第&amp;quot;+(r1+1)+&amp;quot;行第1列数据异常,请检查上传文件&amp;quot;,OAException.INFORMATION);
  }

  if(tempRow1.getCell((short)1)==null||tempRow1.getCell((short)1).getStringCellValue()==null)
  {
    throw new OAException(&amp;quot;INFO:sheet[1]中第&amp;quot;+(r1+1)+&amp;quot;行第2列数据异常,请检查上传文件&amp;quot;,OAException.INFORMATION);
  }

  if(tempRow1.getCell((short)2)==null||tempRow1.getCell((short)2).getStringCellValue()==null)
  {
    throw new OAException(&amp;quot;INFO:sheet[1]中第&amp;quot;+(r1+1)+&amp;quot;行第3列数据异常,请检查上传文件&amp;quot;,OAException.INFORMATION);
  }
  if(tempRow1.getCell((short)3)==null||tempRow1.getCell((short)3).getDateCellValue()==null)
  {
    throw new OAException(&amp;quot;INFO:sheet[1]中第&amp;quot;+(r1+1)+&amp;quot;行第4列数据异常,请检查上传文件&amp;quot;,OAException.INFORMATION);
  }
  vin1=tempRow1.getCell((short)0).getStringCellValue().trim();
  type1=tempRow1.getCell((short)1).getStringCellValue().trim();
  color1=tempRow1.getCell((short)2).getStringCellValue().trim();
  vdate1=tempRow1.getCell((short)3).getDateCellValue();

  o_vin1[r1-1]=vin1;
  o_type1[r1-1]=type1;
  o_color1[r1-1]=color1;
  o_date1[r1-1]=new oracle.jbo.domain.Date(new java.sql.Date(vdate1.getTime()));
  o_des1[r1-1]=null;
  realCount1++;      
}

List exceptions = new ArrayList();
exceptions.add(new OAException(&amp;quot;解析出上传EXCEL文件中信号1表&amp;quot;+realCount1+&amp;quot;条记录&amp;quot;,OAException.INFORMATION ));
//bulkinsert...
exceptions.add(new OAException(&amp;quot;开始插入信号1临时表&amp;quot;,OAException.INFORMATION ));    
String result=this.bulkInsert1(o_vin1,o_type1,o_color1,o_date1,o_des1);
exceptions.add(new OAException(&amp;quot;结果:&amp;quot;+result,OAException.INFORMATION ));        
exceptions.add(new OAException(&amp;quot;结束插入信号1临时表&amp;quot;,OAException.INFORMATION ));

OAException.raiseBundledOAException(exceptions);
&lt;/pre&gt;&lt;/div&gt;


&lt;p _="%" endcodeblock="endcodeblock"&gt;}&lt;/p&gt;
&lt;h4 id="oafbulk-insert"&gt;OAF调用bulk insert插入大批量数据&lt;/h4&gt;
&lt;p&gt;{% codeblock lang:java %}
 public String bulkInsert1(Object[] vin,Object[] type,Object[] color,Object[] vdate, Object[] des) 
    {
        CallableStatement st = null;
        String result=&amp;rdquo;&amp;ldquo;;
        String stmt = &amp;ldquo;{ call ch_report_pkg.INSERTREPORT1(?,?,?,?,?,?) }&amp;rdquo;;
        try {
            st=this.getDBTransaction().createCallableStatement(stmt,0);
            ArrayDescriptor T_VARCHAR30=null,
             T_VARCHAR10=null,
             T_VARCHAR200=null,
             T_DATE=null;
            ARRAY a_vin=null,a_type=null,a_color=null,a_vdate=null,a_des=null;
            T_VARCHAR30=oracle.sql.ArrayDescriptor.createDescriptor(&amp;ldquo;T_VARCHAR30&amp;rdquo;,st.getConnection());
            T_VARCHAR10=oracle.sql.ArrayDescriptor.createDescriptor(&amp;ldquo;T_VARCHAR10&amp;rdquo;,st.getConnection());
            T_VARCHAR200=oracle.sql.ArrayDescriptor.createDescriptor(&amp;ldquo;T_VARCHAR200&amp;rdquo;,st.getConnection());
            T_DATE=oracle.sql.ArrayDescriptor.createDescriptor(&amp;ldquo;T_DATE&amp;rdquo;,st.getConnection());
            a_vin=new ARRAY(T_VARCHAR30,st.getConnection(),vin);
            a_type=new ARRAY(T_VARCHAR30,st.getConnection(),type);
            a_color=new ARRAY(T_VARCHAR10,st.getConnection(),color);
            a_vdate=new ARRAY(T_DATE,st.getConnection(),vdate);          &lt;br /&gt;
            a_des=new ARRAY(T_VARCHAR200,st.getConnection(),des);            &lt;br /&gt;
            st.setArray(1,a_vin);
            st.setArray(2,a_type);
            st.setArray(3,a_color);
            st.setArray(4,a_vdate);
            st.setArray(5,a_des);
            st.registerOutParameter(6, OracleTypes.VARCHAR);
            st.execute();&lt;br /&gt;
            result=st.getString(6);
            return result;
        } catch (Exception e) {
            throw new JboException(e);
        } finally {        &lt;br /&gt;
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }      &lt;br /&gt;
    }&lt;/p&gt;
&lt;p&gt;{% endcodeblock %}&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;将POI解析出来的数据，包装成Object对象作为参数传递给数据库ch_report_pkg包中的INSERTREPORT1方法，bulk insert到数据库，极大地提高了插入数据效率。
{% codeblock lang:sql %}
PROCEDURE INSERTREPORT1(I_VIN      IN T_VARCHAR30,
                          I_CAR_TYPE IN T_VARCHAR30,
                          I_COLOR    IN T_VARCHAR10,
                          I_VDATE    IN T_DATE,
                          I_DES      IN T_VARCHAR200,
                          MESSAGE    OUT VARCHAR2) IS
    I INTEGER;
  BEGIN
    DELETE FROM CH_REPORT_1_TEMP;
    COMMIT;
    FORALL I IN 1 .. I_VIN.COUNT
      INSERT INTO CH_REPORT_1_TEMP
        (VIN, CAR_TYPE, COLOR, VDATE, DESCRIPTION)
      VALUES
        (I_VIN(I), I_CAR_TYPE(I), I_COLOR(I), I_VDATE(I), I_DES(I));
    MESSAGE := I_VIN.COUNT || &amp;lsquo;条数据正常插入!&amp;rsquo;;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      MESSAGE := &amp;lsquo;出现异常，错误代码如下：&amp;rsquo; || SQLERRM;
      ROLLBACK;
  END;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;此外，需要先根据表结构定义出字段类型如下：
{% codeblock lang:sql %}
create or replace TYPE T_VARCHAR30 IS TABLE OF VARCHAR2(30);
create or replace TYPE T_VARCHAR10 IS TABLE OF VARCHAR2(10);
create or replace TYPE T_VARCHAR200 IS TABLE OF VARCHAR2(200);
create or replace TYPE T_DATE IS TABLE OF DATE;&lt;/p&gt;
&lt;p&gt;那么数据就顺利批量插入到临时表中了。&lt;/p&gt;
&lt;h4 id="_2"&gt;数据去除重复&lt;/h4&gt;
&lt;p&gt;需要根据插入数据的主键VIN判断是否跟数据库中存在的数据重复，  &lt;br /&gt;
在程序中对比的话效率很低，所以采用在数据库中通过语句  &lt;br /&gt;
&lt;code&gt;select count(vin) from (table union temp_table) group by vin&lt;/code&gt;  &lt;br /&gt;
来判断，count数量大于1表示有重复。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 09 Apr 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-04-09:oafshang-chuan-da-pi-liang-excelwen-jian.html</guid><category>oaf</category></item><item><title>"Jdeveloper运行速度优化"</title><link>http://dengdezhao.cn/jdeveloperyun-xing-su-du-you-hua.html</link><description>&lt;h4 id="jdev"&gt;&lt;em&gt;本文适合木有高配机却不得不在JDEV下开发的屌丝程序员&lt;/em&gt;&lt;/h4&gt;
&lt;h4 id="jdev_1"&gt;先来了解下Jdev的两个配置文件&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
E:\Oracle\Middleware11.1.2.3.0\jdeveloper\ide\bin\ide.conf  &lt;br /&gt;
E:\Oracle\Middleware11.1.2.3.0\jdeveloper\jdev\bin\jdev.conf&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;几个关键参数：
{% codeblock lang:java %}
AddVMOption  -Xmx        //堆大小的最大值，在机器物理内存允许的基础上该值越大越好
AddVMOption  -Xms        //堆大小的初始值（默认给个128差不多）
AddVMOption  -XX:MaxPermSize //PermGen大小，太小会报OutOfMemoryError错误&lt;br /&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;这几个参数设置得不合适的话JDEV会无法启动并报以下错误：
{% codeblock lang:java %}
Unable to create an instance of the Java Virtual Machine Located at path:
E:\Oracle\Middleware11.1.2.3.0\jdk160_24\jre\bin\client\jvm.dll&lt;/p&gt;
&lt;p&gt;好了~，我们现在需要做的就是将这几个参数的值设置得适合它的大小，以便JDEV运行得到最佳性能&lt;/p&gt;
&lt;p&gt;因为我的机器是32位系统WIN2003 6G内存，系统吃掉2G左右，可用内存不到4G
而32位的JDK最大好像也只能申请1.5G左右,所以在我这机器中Jdev能分配到1G内存就差不多了&lt;/p&gt;
&lt;p&gt;先随意设置以上三个参数值，将JDEV能够运行起来，然后使用JDK自带的工具来监控下内存情况
E:\Oracle\Middleware11.1.2.3.0\jdk160_24\bin\jvisualvm.exe&lt;/p&gt;
&lt;p&gt;根据图中&lt;strong&gt;堆&lt;/strong&gt;及&lt;strong&gt;PermGen&lt;/strong&gt;中显示使用大小调整三个参数值。
发现在不断操作JDev时PermGen始终维持在128左右不到256的样子，
所以设置  &lt;br /&gt;
-XX:MaxPermSize值为&lt;code&gt;AddVMOption  -XX:MaxPermSize=256M&lt;/code&gt;  &lt;br /&gt;
-Xms值为&lt;code&gt;AddVMOption  -Xms128M&lt;/code&gt;  &lt;br /&gt;
通过不断测试最终调整-Xmx值为&lt;code&gt;AddVMOption  -Xmx896M&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若在运行中出现OutOfMemoryError错误再根据信息慢慢调整。当然最好还是升级机器配置换成64位的系统及JDK就没有内存限制啦！~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Thu, 04 Apr 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-04-04:jdeveloperyun-xing-su-du-you-hua.html</guid><category>jdeveloper</category><category>AddVMOption</category></item><item><title>"JavaMail发送邮件中文乱码"</title><link>http://dengdezhao.cn/javamailfa-song-you-jian-zhong-wen-luan-ma.html</link><description>&lt;p&gt;使用JavaMail发送邮件时，邮件主题以及发件人中有中文字符时出现乱码&lt;/p&gt;
&lt;p&gt;邮件正文正常。&lt;/p&gt;
&lt;p&gt;尝试对中文字符串进行转码：&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
    public String encode(String str) {
        sun.misc.BASE64Encoder enc = new sun.misc.BASE64Encoder();
        try {
            return &amp;ldquo;=?UTF-8?B?&amp;rdquo; + enc.encode(str.getBytes(&amp;ldquo;UTF-8&amp;rdquo;)) + &amp;ldquo;?=&amp;rdquo;;
        } catch (UnsupportedEncodingException e) {
            return &amp;ldquo;UnsupportedEncodingException&amp;rdquo;;
        }
    }&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;测试发送之后返回&lt;code&gt;邮件主题&lt;/code&gt;内容仍然是乱码
{% codeblock lang:java %}
=?UTF-8?B?WzIwMTMtMDMtMTld5pyq5qOA5pyq5Lqk5pWw5o2uLOaAu+ijhei9pumXtOaVhemanOi9puWBnOi9&lt;/p&gt;
&lt;p&gt;通过返回字符串&lt;code&gt;=?UTF-8?B?&lt;/code&gt;得知已经转码成功，但为啥邮件主题仍然乱码？百思不得其解。然后突然发现之前另外一个邮件发送功能调用相同的代码显示是正常的，推测乱码可能跟主题字符串的内容有关。&lt;/p&gt;
&lt;p&gt;经过反复测试，终于找到乱码原因，结果令人大跌眼镜~！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原来这个版本的JavaMail对邮件主题有长度限制，超过大约15个中文字符就会显示乱码！&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 20 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-03-20:javamailfa-song-you-jian-zhong-wen-luan-ma.html</guid><category>javamail</category></item><item><title>"Jive Forums admin console 管理员账户密码重置"</title><link>http://dengdezhao.cn/jive-forums-admin-console-guan-li-yuan-zhang-hu-mi-ma-zhong-zhi.html</link><description>&lt;h4 id="_1"&gt;&lt;i class="icon-file"&gt;&lt;/i&gt;   需求：&lt;/h4&gt;
&lt;p&gt;webcenter集成AD 之后发现Discussion控件用不了，使用weblogic账号也无法进入Jive forums的控制台，但是weblogic控制台可以登录。于是想重置Jive Forums的管理账号密码。&lt;/p&gt;
&lt;h4 id="_2"&gt;&lt;i class="icon-folder-open"&gt;&lt;/i&gt; 分析：&lt;/h4&gt;
&lt;p&gt;修改jiveuser表将管理员账户密码更新即可。&lt;/p&gt;
&lt;h4 id="_3"&gt;&lt;i class="icon-pencil"&gt;&lt;/i&gt; 技术实现：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;连接到FM_DISCUSSIONS schema，查询jiveuser，发现passwordhash字段值变为了&amp;rdquo;-&amp;ldquo;字符，可能是集成AD之后这边的数据被覆盖了，按字段名推测密码应该是hash加密后的密文，于是将weblogic用户的密码通过MD5加密生成密文更新该字段，重启webcenter之后，问题解决。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;附：
        //password: Welcome1 
        update jiveuser set passwordhash=&amp;rsquo;b56e0b4ea4962283bee762525c2d490f&amp;rsquo; where username=&amp;rsquo;weblogic&amp;rsquo;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 20 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-03-20:jive-forums-admin-console-guan-li-yuan-zhang-hu-mi-ma-zhong-zhi.html</guid><category>Jive</category></item><item><title>"OAF单选删除行功能"</title><link>http://dengdezhao.cn/oafdan-xuan-shan-chu-xing-gong-neng.html</link><description>&lt;hr /&gt;
&lt;p&gt;平台：Jdeveloper 9i    &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;一般实现步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在VO中添加新transient属性selector，updatable设置为always。    &lt;/li&gt;
&lt;li&gt;在PG中给table添加singleSelection方法，并绑定view Instance为VO的instance，View Attribute为刚刚新建的transient属性seletor。        &lt;/li&gt;
&lt;li&gt;这样当用户勾选checkbox时，会给transient属性变量赋值为Y，因此，在删除逻辑中循环判断VO中的transient属性，当其为Y时执行remove该行即可实现选择删除功能。  &lt;br /&gt;
&lt;strong&gt;相关代码如下：&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;CO中processFormRequest里添加代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
    //当单击deleteBtn按钮时执行AM中的deleteAutoSequenceVO方法  &lt;br /&gt;
    if (pageContext.getParameter(&amp;ldquo;deleteBtn&amp;rdquo;)!=null)
    {
      am.invokeMethod(&amp;ldquo;deleteAutoSequenceVO&amp;rdquo;);&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AM中代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
    public void deleteAutoSequenceVO() {
        OAViewObject vo = this.getChAutoSequenceVO1();
        RowSetIterator iter = vo.createRowSetIterator(&amp;ldquo;delete&amp;rdquo;);
        if (vo != null) {
            int num = vo.getRowCount();
            for (int i = 0; i &amp;lt; num; i++) {
                Row temp = iter.next();
                if (&amp;ldquo;Y&amp;rdquo;.equals(temp.getAttribute(&amp;ldquo;selector&amp;rdquo;))) {
                    vo.setCurrentRow(temp);
                    vo.removeCurrentRow();
                    break;
                }
            }
        }
        iter.closeRowSetIterator();
        throw new OAException(&amp;ldquo;删除成功,请点击[保存]按钮生效到数据库.&amp;rdquo;,  &lt;br /&gt;
                              OAException.INFORMATION);
    }&lt;/p&gt;
&lt;p&gt;{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;但是在实际开发中，出现一个很诡异的现象，其它页面单选删除功能都正常，某一页面单选之后却无法赋值Y给VO中的transient变量，推测可能是VO用的是复合主键或者其它框架BUG导致，无奈给单选再添加手工赋值功能。    &lt;/p&gt;
&lt;p&gt;选择单选控件，将其Client Action中的Action Type设置为firePartialAction Submit设置为false。准备在用户单选时调用自定义方法，给变量赋值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CO中processFormRequest里添加如下方法&lt;/strong&gt;
{% codeblock lang:java %}
        if (&amp;ldquo;update&amp;rdquo;.equals(pageContext.getParameter(OAWebBeanConstants.EVENT_PARAM))) {
            String rowRef =
                pageContext.getParameter(OAWebBeanConstants.EVENT_SOURCE_ROW_REFERENCE);
            Row currentRow = am.findRowByRef(rowRef);
            currentRow.setAttribute(&amp;ldquo;selector&amp;rdquo;, &amp;ldquo;Y&amp;rdquo;);
        }&lt;/p&gt;
&lt;p&gt;{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;这样便实现了单选删除功能。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 20 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-03-20:oafdan-xuan-shan-chu-xing-gong-neng.html</guid><category>oaf</category></item><item><title>迁移WordPress博客至Octopress</title><link>http://dengdezhao.cn/qian-yi-wordpressbo-ke-zhi-octopress.html</link><description>&lt;h4 id="git"&gt;安装GIT&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
yum -y install git&lt;/p&gt;
&lt;h4 id="rvm"&gt;安装RVM需要的包&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
sudo yum install bash curl patch&lt;/p&gt;
&lt;h4 id="rvm_1"&gt;安装RVM&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
curl -L https://get.rvm.io | bash -s stable &amp;ndash;ruby&lt;/p&gt;
&lt;h4 id="ruby"&gt;安装Ruby需要的包&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
sudo yum install gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison iconv-devel java&lt;/p&gt;
&lt;h4 id="ruby-193"&gt;安装Ruby 1.9.3&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
rvm install 1.9.3
rvm use 1.9.3
rvm rubygems latest&lt;/p&gt;
&lt;h4 id="octopress"&gt;下载octopress&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
git clone git://github.com/imathis/octopress.git dengdezhao
cd dengdezhao
ruby &amp;ndash;version  &lt;em&gt;#应该显示1.9.3&lt;/em&gt;
gem install bundler
bundle install
rake install&lt;/p&gt;
&lt;h4 id="warninginsecure-world-writable-dir"&gt;出现Warning:Insecure world writable dir&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;这个一般是由于权限的问题，我出现这个问题是因为是用ROOT安装的RVM，然后用其它用户访问，为了方便我直接把/usr/local目录权限设置为777，然后就弹出这个警告了，/usr/local目录很重要，不允许非owner访问，所以设置为755即可解决该问题。
{% codeblock lang:java %}
sudo chmod -R 755 /usr/local&lt;/p&gt;
&lt;h4 id="wordpressxml"&gt;将Wordpress数据导出为XML文件&lt;/h4&gt;
&lt;p&gt;进入Wordpress后台，将全站数据保存为XML文件，放在Octopress根目录下&lt;/p&gt;
&lt;h4 id="_1"&gt;下载迁移工具&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;https://gist.github.com/chitsaou/1394128  &lt;br /&gt;
下载&lt;strong&gt;wordpressdotcom.rb&lt;/strong&gt;放到Utils目录中，执行命令
{% codeblock lang:java %}
ruby -r &amp;ldquo;./utils/wordpressdotcom.rb&amp;rdquo; -e &amp;ldquo;Jekyll::WordpressDotCom.process&amp;rdquo;&lt;/p&gt;
&lt;p&gt;运行出错，需要安装hpricot&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
gem install hpricot
{% endcodeblock %}
安装成功之后再执行上面的迁移命令，即可把wordpress中的文章导入到octopress的source/_posts中了&lt;/p&gt;
&lt;h4 id="_2"&gt;修改文章图片链接&lt;/h4&gt;
&lt;p&gt;迁移过来的文章中图片链接可能不大对，需要修改才能让图片显示正常，把原来wp-contents目录下uploads文件夹拷到相应路径下，替换掉文件中的静态地址为图片地址即可避免点击图片时出现404错误。  &lt;/p&gt;
&lt;h4 id="_3"&gt;修改页面名字及新增[标签云]&amp;amp;[关于]页面&lt;/h4&gt;
&lt;p&gt;修改navigation.html
{% codeblock lang:java %}
vi source/_includes/custom/navigation.html 
{% endcodeblock %}
给各页面修改个性化名字，并新增两个页面&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;    &amp;lt;ul class=&amp;quot;main-navigation&amp;quot;&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/&amp;quot;&amp;gt;博客主页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/blog/archives&amp;quot;&amp;gt;文章列表&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/tag&amp;quot;&amp;gt;标签云&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ root_url }}/about&amp;quot;&amp;gt;关于&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建tag&amp;amp;about页
{% codeblock lang:ruby %}
rake new_page[tag]
rake new_page[about]
{% endcodeblock %}
编辑页面内容，并下载配置标签云插件
{% codeblock lang:ruby %}
git clone https://github.com/robbyedwards/octopress-tag-pages.git
git clone https://github.com/robbyedwards/octopress-tag-cloud.git
{% endcodeblock %}
将下载的文件拷贝至相应目录，并在_config.yml中增加一行    &lt;code&gt;tag_dir: tags&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="_4"&gt;生成静态页面及预览&lt;/h4&gt;
&lt;p&gt;以上操作完成之后，执行&lt;code&gt;rake generate&lt;/code&gt;命令生成静态页面，然后&lt;code&gt;rake preview&lt;/code&gt;，在浏览器中输入http://localhost:4000即可预览站点。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 19 Mar 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-03-19:qian-yi-wordpressbo-ke-zhi-octopress.html</guid><category>wordpress</category><category>octopress</category></item><item><title>! '[SOLVED]Long mode not supported, rebooting Press any key to reboot'</title><link>http://dengdezhao.cn/solvedlong-mode-not-supported-rebooting-press-any-key-to-reboot.html</link><description>&lt;p&gt;虚拟机安装solaris 11的时候弹出
&lt;blockquote&gt;Long mode not supported, rebooting Press any key to reboot........&lt;/blockquote&gt;
原因是solaris11只支持64位，需要把BIOS的CPU选项里Inter Virtualization Technology和Inter VT均设置为ENABLE，&lt;/p&gt;

&lt;p&gt;然后将虚拟机的设置如下：
&lt;blockquote&gt;Virtual Machine Setting-&amp;gt;Processors-&amp;gt;Virtualizatoin engine-&amp;gt;Preferred mode=Intel VT-x/EPT or AMD-v/RVI&lt;/blockquote&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Thu, 31 Jan 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-01-31:solvedlong-mode-not-supported-rebooting-press-any-key-to-reboot.html</guid><category>vmware</category></item><item><title>firefox升级18之后,autoproxy失效,goagent无法使用问题解决</title><link>http://dengdezhao.cn/firefoxsheng-ji-18zhi-hou-autoproxyshi-xiao-goagentwu-fa-shi-yong-wen-ti-jie-jue.html</link><description>&lt;p&gt;之前使用的是17版本的firefox，配置好了autoproxy使用goagent能够正常代理，之后升级firefox18之后，却代理不了了。重装过firefox,重装过goagent，重装过autoproxy都无效。&lt;/p&gt;

&lt;p&gt;试过使用IE，设置代理127.0.0.1:8087+goagent可以正常代理，因此排除goagent问题。&lt;/p&gt;

&lt;p&gt;后来查看firefox18的版本说明，才发现由于安全性禁用了部分功能猜测可能由此导致无法代理&lt;/p&gt;

&lt;p&gt;firefox说明：
&lt;blockquote&gt;禁用不安全内容：Firefox 可以禁用HTTPS安全网页中的不安全内容，来维护用户在互联网通信中的隐私。目前可以在about:config中启用这个特性。&lt;/blockquote&gt;
打开about:config，过滤栏输入：proxy  修改如下选项&lt;/p&gt;

&lt;p&gt;extensions.autoproxy.proxyMode   &lt;strong&gt;auto&lt;/strong&gt;
network.proxy.type               &lt;strong&gt;1&lt;/strong&gt;
signon.autologin.proxy           &lt;strong&gt;true&lt;/strong&gt;
即可解决问题。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 30 Jan 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-01-30:firefoxsheng-ji-18zhi-hou-autoproxyshi-xiao-goagentwu-fa-shi-yong-wen-ti-jie-jue.html</guid><category>firefox</category><category>goagent</category></item><item><title>Use Javascript in OAF</title><link>http://dengdezhao.cn/use-javascript-in-oaf.html</link><description>&lt;h4 id="js"&gt;使用Js脚本库&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;在CO的&lt;em&gt;processRequest&lt;/em&gt;中引入JS库&lt;br /&gt;
编写JS库:Calendar2013.js
{% codeblock lang:java %}
pageContext.putJavaScriptLibrary(&amp;ldquo;Calendar&amp;rdquo;,&amp;rdquo;Calendar2013.js&amp;rdquo;); 
((OAMessageTextInputBean)webBean
.findChildRecursive(&amp;ldquo;inputDate&amp;rdquo;))
.setOnClick(&amp;ldquo;setday(this)&amp;rdquo;);&lt;/p&gt;
&lt;p&gt;需要把Calendar2013.js放置在$&lt;strong&gt;COMMON_TOP&lt;/strong&gt;/html下。&lt;/p&gt;
&lt;h4 id="javascript"&gt;直接引用javaScript&lt;/h4&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;编写&lt;em&gt;JavaScript&lt;/em&gt;:
{% codeblock lang:java %}
String javaScript=&amp;rdquo;JAVASCRIPT:function setday(){&amp;hellip;}&amp;rdquo;;&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;CO&lt;/strong&gt;的&lt;em&gt;processRequest&lt;/em&gt;中加载&lt;em&gt;javascript&lt;/em&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;{% codeblock lang:java %}
pageContext.putJavaScriptFunction(&amp;ldquo;sayday()&amp;rdquo;,javaScript);
((OAMessageTextInputBean)webBean.findChildRecursive(&amp;ldquo;inputDate&amp;rdquo;))
    .setOnClick(&amp;ldquo;javascript:setday()&amp;rdquo;);&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 30 Jan 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-01-30:use-javascript-in-oaf.html</guid><category>javascript</category><category>oaf</category></item><item><title>虚拟机环境RHEL6.3安装EBS R12</title><link>http://dengdezhao.cn/xu-ni-ji-huan-jing-rhel63an-zhuang-ebs-r12.html</link><description>&lt;p&gt;一直想自己搭建个R12的环境学习学习，于是买了块500G的移动硬盘，想把R12安装在移动硬盘中。&lt;/p&gt;
&lt;p&gt;准备工作：&lt;/p&gt;
&lt;p&gt;先安装好虚拟机VMware Workstation。创建一个RHEL6.3的虚拟机，硬盘300G,足够R12的FRESH安装了。（如果想DEMO安装，建议还是再大点，以免出现空间不足）&lt;/p&gt;
&lt;p&gt;下载好R12的安装介质，我是下载的12.1.1.0版本的，当时通过代理断断续续下载了一个星期，真是坑爹。（下载完成注意核准MD5保证无损）&lt;/p&gt;
&lt;p&gt;以ROOT进入虚拟机环境中，配置RHEL6.3的网络，使用静态IP:192.168.133.129 /255.255.255.0   gateWay:0.0.0.0 DNS:192.168.133.1&lt;/p&gt;
&lt;p&gt;具体IP如何设置，可通过检查在虚拟机中能否PING通宿主机，以及能否PING通www.dengdezhao.cn来测试：）&lt;/p&gt;
&lt;p&gt;配置主机名信息等#vim /etc/hosts&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1           localhost.localdomain   localhost
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;192.168.133.129     erp.dengdezhao.cn         erp 检查#vim /etc/sysconfig/network 是否有以下主机名信息&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;HOSTNAME=erp.dengdezhao.cn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重命名#mv /etc/sysconfig/networking/profiles/default/network /etc/sysconfig/networking/profiles/default/network_bak&lt;/p&gt;
&lt;p&gt;检查网络是否正常：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;#ping erp
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="ping-192168133129"&gt;ping 192.168.133.129&lt;/h1&gt;
&lt;h1 id="ping-erpdengdezhaocn"&gt;ping erp.dengdezhao.cn&lt;/h1&gt;
&lt;h1 id="ping-wwwdengdezhaocn-vim-etcsysctlconf"&gt;ping www.dengdezhao.cn 文件末尾追加如下信息  #vim /etc/sysctl.conf&lt;/h1&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;kernel.sem = 256 32000 100 142
kernel.shmall = 2097152
kernel.shmmax = 2147483648
kernel.shmmni = 4096
kernel.msgmax = 8192
kernel.msgmnb = 65535
kernel.msgmni = 2878
fs.file-max = 65536
net.ipv4.ip_local_port_range = 1024 65000
net.core.rmem_default = 262144
net.core.rmem_max = 262144
net.core.wmem_default = 262144
net.core.wmem_max = 262144
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行命令 #sysctl –p反应以上变更到系统中&lt;/p&gt;
&lt;p&gt;追加以下信息# vim /etc/security/limits.conf&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;hard nofile 65535
soft nofile 4096
hard nproc 16384
soft nproc 2047
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看分区信息：#df -h   发现/home下空间有200多G，于是决定将R12安装在/home下&lt;/p&gt;
&lt;h1 id="mkdir-homed01"&gt;mkdir  /home/d01                          ##用来存放数据库层，应用层和数据库文件等&lt;/h1&gt;
&lt;h1 id="chmod-r-777-homed01"&gt;chmod  -R 777  /home/d01&lt;/h1&gt;
&lt;h1 id="mkdir-homed01stage12"&gt;mkdir  /home/d01/stage12                    ##用来存放安装文件&lt;/h1&gt;
&lt;h1 id="chmod-r-777-homed01stage12"&gt;chmod  -R 777  /home/d01/stage12&lt;/h1&gt;
&lt;p&gt;创建系统用户Oracle&lt;/p&gt;
&lt;h1 id="usrsbingroupadd-dba"&gt;/usr/sbin/groupadd dba                               ##增加一个用户组&lt;/h1&gt;
&lt;h1 id="usrsbinuseradd-g-dba-d-homed01-oracle-homed01"&gt;/usr/sbin/useradd –g dba –d /home/d01 oracle    ##增加一个用户，主目录是/home/d01&lt;/h1&gt;
&lt;h1 id="usrsbinpasswd-oracle-oracle"&gt;/usr/sbin/passwd oracle                                ##给oracle添加密码&lt;/h1&gt;
&lt;p&gt;（注意：看过很多文档都是用以上命令创建用户，不知道是不是BUG的原因，我在虚拟机环境RHEL6.3中使用以上命令创建用户时.bash_profile始终不能自动生成，于是我进入图形桌面，使用“系统”-“管理”-“用户和组群”功能创建用户即可，这个原因害我重装了R12两次才发现）&lt;/p&gt;
&lt;p&gt;重装YUM以便RHEL6能更新（非注册用户不能直接更新）&lt;/p&gt;
&lt;p&gt;缷载原有YUM&lt;/p&gt;
&lt;p&gt;rpm -aq|grep yum|xargs rpm -e –nodeps&lt;/p&gt;
&lt;p&gt;下载163的RPM重新安装&lt;/p&gt;
&lt;p&gt;wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.27-14.el6.centos.noarch.rpm
wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-metadata-parser-1.1.2-14.1.el6.x86_64.rpm
wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.26-11.el6.noarch.rpm
wget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpm&lt;/p&gt;
&lt;p&gt;安装YUM&lt;/p&gt;
&lt;p&gt;rpm -ivh python-iniparse-0.3.1-2.1.el6.noarch.rpm
rpm -ivh yum-metadata-parser-1.1.2-14.1.el6.x86_64.rpm
rpm -ivh yum-3.2.27-14.el6.centos.noarch.rpm um-plugin-fastestmirror-1.1.26-11.el6.noarch.rpm&lt;/p&gt;
&lt;p&gt;进入 # cd /etc/yum.repos.d&lt;/p&gt;
&lt;p&gt;wget http://mirrors.163.com/.help/CentOS-Base-163.repo&lt;/p&gt;
&lt;h1 id="vim-centos-base-163repo"&gt;vim CentOS-Base-163.repo&lt;/h1&gt;
&lt;p&gt;将其中$releasever都替换成6.3  $basearch替换成i386&lt;/p&gt;
&lt;h1 id="yum-clean-all"&gt;yum clean all&lt;/h1&gt;
&lt;h1 id="yum-install-gcc"&gt;yum install gcc测试下看行不行&lt;/h1&gt;
&lt;p&gt;检查RHEL6.3是否存在以下R12必需的软件包&lt;/p&gt;
&lt;p&gt;rpm -q glibc-2.3.4-2.25
rpm -q glibc-common-2.3.4-2.25
rpm -q binutils-2.15.92.0.2-21
rpm -q compat-libstdc++-296-2.96-132.7.2
rpm -q gcc-3.4.6-3.1
rpm -q gcc-c++-3.4.6-3.1
rpm -q libgcc-3.4.6-3
rpm -q libstdc++-3.4.6-3.1
rpm -q libstdc++-devel-3.4.6-3
rpm –q libaio_0.3.105-2
rpm –q libaio_devel_0.3.105-2
rpm -q openmotif21-2.1.30-11.RHEL4.6
rpm -q pdksh-5.2.14-30.3
rpm -q setarch-1.6-1
rpm -q make-3.80-6.EL4
rpm -q gnome-libs-1.4.1.2.90-44.1
rpm -q sysstat-5.0.5-11.rhel4
rpm -q compat-db-4.1.25-9
rpm -q control-center-2.8.0-12.rhel4.5
rpm -q xscreensaver-4.18-5.rhel4.11&lt;/p&gt;
&lt;p&gt;这些包一定要保证都有，或者版本比列出来的高（注意：检查一下unzip的版本是不是5.x！！！一定必须是5.x的版本，否则会导致安装R12完成后OHS启动不了，害我重装了一次）&lt;/p&gt;
&lt;p&gt;打补丁：6078836   拷贝libdb.so.2到/usr/lib&lt;/p&gt;
&lt;p&gt;确认所有包都下载安装好了之后执行命令#ldconfig –v&lt;/p&gt;
&lt;p&gt;以oracle用户登录系统，修改oracle用户的登录文件.bash_profile，追加如下两行：&lt;/p&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;LD_ASSUME_KERNEL=2.6.9-78 #这个可以通过在Linux运行uname –r来获得

export LD_ASSUME_KERNEL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行：$ mkdir /home/d01/oraInventory&lt;/p&gt;
&lt;p&gt;以ROOT登录系统创建文件：/etc/ oraInst.loc 内容：inventory_loc=/d01/oraInventory&lt;/p&gt;
&lt;p&gt;开始根据文档安装R12&lt;/p&gt;
&lt;p&gt;安装完成之后，复制.bash_profile文件&lt;/p&gt;
&lt;p&gt;$cp .bash_profile .ora&lt;/p&gt;
&lt;p&gt;追加一行：(. 和/中间有一个空格，红色是版本号及主机名，因人而异，注意修改好）&lt;/p&gt;
&lt;p&gt;. /home/d01/oracle/PROD/db/tech_st/11.1.0/PROD_erp.env
$cp .bash_profile .app&lt;/p&gt;
&lt;p&gt;最后加一行&lt;/p&gt;
&lt;p&gt;. /home/d01/oracle/PROD/apps/apps_st/appl/APPSPROD_erp.env
编写停止及启动DB和APP的脚本：&lt;/p&gt;
&lt;h1 id="vim-start_dbsh"&gt;vim start_db.sh&lt;/h1&gt;
&lt;p&gt;cd ~&lt;/p&gt;
&lt;p&gt;source .ora&lt;/p&gt;
&lt;p&gt;cd /home/d01/oracle/PROD/db/tech_st/11.1.0/appsutil/scripts/PROD_erp&lt;/p&gt;
&lt;p&gt;./addlnctl.sh start PROD&lt;/p&gt;
&lt;p&gt;./addbctl.sh start&lt;/p&gt;
&lt;h1 id="vim-start_appsh"&gt;vim start_app.sh&lt;/h1&gt;
&lt;p&gt;cd ~&lt;/p&gt;
&lt;p&gt;source .app&lt;/p&gt;
&lt;p&gt;cd /home/d01/oracle/PROD/inst/apps/PROD_erp/admin/scripts&lt;/p&gt;
&lt;p&gt;./adstrtal.sh apps/apps&lt;/p&gt;
&lt;h1 id="vim-stop_appsh"&gt;vim stop_app.sh&lt;/h1&gt;
&lt;p&gt;cd ~&lt;/p&gt;
&lt;p&gt;source .app&lt;/p&gt;
&lt;p&gt;cd /home/d01/oracle/PROD/inst/apps/PROD_erp/admin/scripts&lt;/p&gt;
&lt;p&gt;./adstpall.sh apps/apps&lt;/p&gt;
&lt;h1 id="vim-stop_dbsh"&gt;vim stop_db.sh&lt;/h1&gt;
&lt;p&gt;cd ~&lt;/p&gt;
&lt;p&gt;source .ora&lt;/p&gt;
&lt;p&gt;cd /home/d01/oracle/PROD/db/tech_st/11.1.0/appsutil/scripts/PROD_erp&lt;/p&gt;
&lt;p&gt;./addlnctl.sh stop PROD&lt;/p&gt;
&lt;p&gt;./addbctl.sh stop
给脚本权限&lt;/p&gt;
&lt;h1 id="chmod-r-777-start_"&gt;chmod -R 777 start_*&lt;/h1&gt;
&lt;h1 id="chmod-r-777-stop_"&gt;chmod -R 777 stop_*&lt;/h1&gt;
&lt;p&gt;这样启动关闭R12就方便多了,执行如下命令即可启动R12：&lt;/p&gt;
&lt;h1 id="start_dbsh"&gt;./start_db.sh&lt;/h1&gt;
&lt;h1 id="start_appsh"&gt;./start_app.sh&lt;/h1&gt;
&lt;p&gt;关闭R12：&lt;/p&gt;
&lt;h1 id="stop_appsh"&gt;./stop_app.sh&lt;/h1&gt;
&lt;h1 id="stop_dbsh"&gt;./stop_db.sh&lt;/h1&gt;
&lt;p&gt;最终需要在宿主机上访问虚拟机中的R12&lt;/p&gt;
&lt;p&gt;除了在c:\windows\system32\drivers\etc\hosts中添加&lt;/p&gt;
&lt;p&gt;192.168.133.129   erp.dengdezhao.cn&lt;/p&gt;
&lt;p&gt;之外，还要在虚拟机中将8000端口打开（“系统”-“管理”-“防火墙设置”-“其它端口”-“添加”-“用户定义的” TCP 8000&lt;/p&gt;
&lt;p&gt;然后打开firefox即可访问虚拟机中的R12：http://erp.dengdezhao.cn:8000&lt;/p&gt;
&lt;p&gt;参照文档：Hui.Sir著EBS_R12_Install_Linux32_PROD_Ver02.doc &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 15 Jan 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-01-15:xu-ni-ji-huan-jing-rhel63an-zhuang-ebs-r12.html</guid><category>RHEL6.3</category><category>R12</category></item><item><title>虚拟机安装EBS R12时出现错误RW-50004 解决</title><link>http://dengdezhao.cn/xu-ni-ji-an-zhuang-ebs-r12shi-chu-xian-cuo-wu-rw-50004-jie-jue.html</link><description>&lt;p&gt;一般出现这个错误多半应该是库文件导致的，查看日志得知是 需要的 unzip 版本过高，RHEL上安装的是6.0的，而R12.1.1.1只支持unzip 5.X 的，很坑爹，yum erase unzip 然后重新安装unzip 5.X rpm即可解决~~&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Sat, 12 Jan 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-01-12:xu-ni-ji-an-zhuang-ebs-r12shi-chu-xian-cuo-wu-rw-50004-jie-jue.html</guid><category>rw-50004</category></item><item><title>OAF开发通过EXCEL导入数据时，用户需要将可能存在重复的主键信息提示出来</title><link>http://dengdezhao.cn/oafkai-fa-tong-guo-exceldao-ru-shu-ju-shi-yong-hu-xu-yao-jiang-ke-neng-cun-zai-zhong-fu-de-zhu-jian-xin-xi-ti-shi-chu-lai.html</link><description>&lt;p&gt;OAF开发通过EXCEL导入数据时，用户需要将可能存在重复的主键信息提示出来.&lt;/p&gt;

&lt;p&gt;有以下两种主键冲突情况：&lt;/p&gt;

&lt;p&gt;1, 表中不存在重复数据，即将导入的数据中存在重复数据。比如表中记录为空，导入的EXCEL中存在记录ID007,ID008,ID009,ID007，此时OAF页面需要将ID007提示出来；&lt;/p&gt;

&lt;p&gt;2,表中存在重复数据。即表中原来已经存在一条记录ID007，此时导入的数据中也存在ID007，需要将ID007提示出来。&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;p&gt;原本想通过查询数据库中ID007的记录是否存在再抛出OAException的做法来实现此需求，后来一想感觉好麻烦；便换种思路决定通过异常来判断。&lt;/p&gt;

&lt;p&gt;情况1，在ViewObject对象CreateRow()之后，给创建的新Row.setAttribute("id",007)时，如果VO中存在两个007的新ROW，会抛出TooManyObjectsException,此时捕获该异常并返回此ID值。&lt;/p&gt;

&lt;p&gt;情况2，难点也在这里，调用commit保存数据时，主键约束异常才会抛出来而且还不知道重复的ID值是多少。重写EO的doDML方法，在此方法中捕获DMLException异常，并且可以得到重复的ID值；
&lt;pre class="brush:java"&gt;  public void doDML(int i,TransactionEvent e)
  {
    try{
    super.doDML(i,e);
    }catch(oracle.jbo.DMLException ex)
    {
        throw new OAException("ERROR:数据库中存在相同的VIN码["+this.getVin()+"],请检查上传文件",OAException.ERROR);
    }
  }&lt;/pre&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Thu, 10 Jan 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-01-10:oafkai-fa-tong-guo-exceldao-ru-shu-ju-shi-yong-hu-xu-yao-jiang-ke-neng-cun-zai-zhong-fu-de-zhu-jian-xin-xi-ti-shi-chu-lai.html</guid><category>oaf</category></item><item><title>OAF 使用OAException输出中文时出现乱码 解决</title><link>http://dengdezhao.cn/oaf-shi-yong-oaexceptionshu-chu-zhong-wen-shi-chu-xian-luan-ma-jie-jue.html</link><description>&lt;p&gt;使用throw new OAException(“你们好”,OAException.WARNING);时出现乱码，尝试new String("你们好”.getBytes("GBK"),"UTF-8")依然没用。&lt;/p&gt;

&lt;p&gt;检查JDEV的Preferences中ENCODING已经更改为“UTF-8”，纠结了好一阵子，才发现工程的Project Settings的Compiler里也有一个ENCODING没有改，囧改好之后再测试乱码问题即解决&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 09 Jan 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2013-01-09:oaf-shi-yong-oaexceptionshu-chu-zhong-wen-shi-chu-xian-luan-ma-jie-jue.html</guid><category>oaf</category></item><item><title>新浪入门应用之---大笨钟</title><link>http://dengdezhao.cn/xin-lang-ru-men-ying-yong-zhi-da-ben-zhong.html</link><description>&lt;p&gt;昨日突然对SAE平台产生了兴趣，于是花了一晚上时间，写了个定点发微博的小应用，也算是了解了下SAE平台的开发流程，以下烂笔头纯粹为方便菜鸟学习，老鸟勿笑。&lt;/p&gt;

&lt;p&gt;之前玩过豆瓣，里面有个有名的“大笨钟”，每到整点便会发个状态“咚”几声以报时，虽然用处不大，但因其一直准点报时也吸引了不少粉丝关注，所以想自己做个类似的功能定时发微博报时。&lt;/p&gt;

&lt;p&gt;于是，看了看SAE的介绍，注册了个开发者账号，新建应用“thebigbenclock"；&lt;/p&gt;

&lt;p&gt;在E盘创建个同名文件夹E:\thebigbenclock&lt;/p&gt;

&lt;p&gt;右建checkout出应用代码https://svn.sinaapp.com/thebigbenclock,确保SVN可以正常连接；&lt;/p&gt;

&lt;p&gt;进入SAE平台，找到代码仓库中的框架“新浪微博OAuth框架"，将此框架下载到应用中，并创建版本&lt;/p&gt;

&lt;p&gt;然后再checkout应用，便可以将“新浪微博OAuth框架"的代码取到本地文件夹下了；&lt;/p&gt;

&lt;p&gt;注意，默认版本为1，会新建一个名为“1”的子文件夹。修改config.php，填上APP key , App Sercet 及 WB_CALLBACK_URL。&lt;/p&gt;

&lt;p&gt;修改weibolist.php，添加以下代码：
&lt;pre class="brush:php"&gt;    $c = new SaeTClientV2( '3987019479' , '1eaa0834c410537aaef2759ffffffd9' , '&lt;span style="color: #ff0000;"&gt;2.00VLxGwBntHp2E04c5f9ad08eyNJFC&lt;/span&gt;');
    $ms  = $c-&amp;gt;home_timeline(); // done
    $uid_get = $c-&amp;gt;get_uid();
    $uid = $uid_get['uid'];
    $user_message = $c-&amp;gt;show_user_by_id( $uid);//根据ID获取用户等基本信息
    $dateString=date("Y-m-d H:i:s");   //获取当前时间；
    $hours=substr($dateString,11,2);&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;    $outString='咚!';&lt;br /&gt;
    for ($a=1;$a&amp;lt;$hours;$a++){&lt;br /&gt;
        $outString=$outString.'咚!';&lt;br /&gt;
      }&lt;/p&gt;

&lt;p&gt;    $ret = $c-&amp;gt;update($dateString.$outString );   //发送微博
上图中access_token，需要根据测试账号预先生成。&lt;/p&gt;

&lt;p&gt;配置config.yaml文件如下：
&lt;pre class="brush:php"&gt;name: thebigbenclock
version: 1
accesskey: 3987019479
cron:
- description: cron test
  url: /weibolist.php
  schedule: every 1 hour,offset 0
  timezone: Beijing&lt;/pre&gt;
打开应用即可在整点时发送微博
&lt;pre class="brush:css"&gt;2012-12-14 09:00:00咚!咚!咚!咚!咚!咚!咚!咚!咚!&lt;/pre&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Fri, 14 Dec 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-12-14:xin-lang-ru-men-ying-yong-zhi-da-ben-zhong.html</guid><category>sinapp</category></item><item><title>ORA-1222：TNS:no such protocol adapter 问题解决</title><link>http://dengdezhao.cn/ora-1222tnsno-such-protocol-adapter-wen-ti-jie-jue.html</link><description>&lt;p&gt;机器上安装的是instantOracleclient-basic-win32-11.2.0.1.0客户端，本来使用PLSQL developer是可以正常连接数据库的；&lt;/p&gt;

&lt;p&gt;后来开发需求装上了Form6&lt;em&gt;i，&lt;/em&gt;发现连接数据库时弹出来ORA-1222：TNS:no such protocol adapter这个错误；&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.配置PL/SQL Developer -&amp;gt; Preferences ，OracleHome设置为Form6i的路径；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.我的电脑 -&amp;gt; 用户变量 设置ORACLE_HOME 为Form6i路径&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;或者可以直接编辑注册表，修改oracle_home的值为[Form安装的HOME文件夹]/[oracle客户端文件夹]；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果需要切换按以上步骤修改oracle_home再重启PLSQL Developer即可以正常连接数据库；
&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;
&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Mon, 03 Dec 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-12-03:ora-1222tnsno-such-protocol-adapter-wen-ti-jie-jue.html</guid><category>ora-1222</category></item><item><title>SOA suite 环境搭建</title><link>http://dengdezhao.cn/soa-suite-huan-jing-da-jian.html</link><description>&lt;p&gt;好久没碰SOA，最近在win2003上准备搭建个环境玩玩。下载相关安装介质&lt;/p&gt;

&lt;p&gt;http://www.oracle.com/technetwork/middleware/soasuite/downloads/index.html&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Database&lt;/strong&gt; 我用的是oracle 11G&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Oracle WebLogic Server &lt;/strong&gt;安装的是10.3.6.0&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Repository Creation Utility 11.1.1.6.0 &lt;/strong&gt;解压缩下载的压缩包，运行/rcuHome/Bin/rcu.bat.执行安装&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;JDeveloper 11.1.1.6.0 &lt;/strong&gt;安装开发工具JDEV，因自带weblogic是11.1.1.5.0安装时可能需要分开不要放在一个oracle主目录里。或者只安装JDEV也行&lt;/p&gt;

&lt;p&gt;5.安装好JDEV后，更新&lt;strong&gt;SOA Extension for JDeveloper 11.1.1.6.0&lt;/strong&gt;插件&lt;/p&gt;

&lt;p&gt;6.安装&lt;strong&gt;SOA Suite &lt;/strong&gt;需要注意的是执行安装时要指定JRE目录-jreLoc "c:\java\jre". &lt;strong&gt;&lt;a href="http://www.oracle.com/technetwork/middleware/soasuite/overview/index.html"&gt;
&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-09-29:soa-suite-huan-jing-da-jian.html</guid><category>soa</category></item><item><title>EBS 并发请求调用SQL时，日志跟输出中文出现乱码问题</title><link>http://dengdezhao.cn/ebs-bing-fa-qing-qiu-diao-yong-sqlshi-ri-zhi-gen-shu-chu-zhong-wen-chu-xian-luan-ma-wen-ti.html</link><description>&lt;p&gt;已知数据库，数据库所在服务器字符集都是UTF8，在并发请求调用的SQL里，fnd_file.put_line(fnd_file.log,'中文')语句输出时，在EBS界面查看就是乱码。&lt;/p&gt;

&lt;p&gt;出现乱码的问题思路：&lt;/p&gt;

&lt;p&gt;1.查看客户端系统字符集是否支持中文。确认本机支持，并且NLS_LANG跟数据库都保持一致，可以排除此因素。&lt;/p&gt;

&lt;p&gt;2.查看数据库端字符集编码是否支持中文，得知是UTF8编码。&lt;/p&gt;

&lt;p&gt;3.查看服务器端是否支持中文编码&lt;/p&gt;

&lt;p&gt;发现以上三个因素都可以排除，EBS请求会在服务器端生成log文件，因此telnet到服务器直接查看生成的log文件看是否出现乱码&lt;/p&gt;

&lt;p&gt;cd $APPLPTMP&lt;/p&gt;

&lt;p&gt;发现生成的文件也是乱码，基本可以确定在数据库端生成文件即出现乱码，需要对中文字符进行转码输出。 exec find_file.put_file(fnd_file.log,convert('中文','UTF8','ZHS16GBK'))；&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Thu, 20 Sep 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-09-20:ebs-bing-fa-qing-qiu-diao-yong-sqlshi-ri-zhi-gen-shu-chu-zhong-wen-chu-xian-luan-ma-wen-ti.html</guid><category>reports</category></item><item><title>EBS并发请求调用Oracle reports时，如何写入日志文件</title><link>http://dengdezhao.cn/ebsbing-fa-qing-qiu-diao-yong-oracle-reportsshi-ru-he-xie-ru-ri-zhi-wen-jian.html</link><description>&lt;p&gt;EBS并发请求调用procedure时，直接在被调用的procedure中使用fnd_file.put_line即可达到要求；&lt;/p&gt;

&lt;p&gt;如果并发请求调用的是oracle reports时，写入日志文件需要使用reports的方法。&lt;/p&gt;

&lt;p&gt;在Before/After report Trigger中使用SRW.message(0,'Message');&lt;/p&gt;

&lt;p&gt;中断报表执行使用SRW.break;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 11 Sep 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-09-11:ebsbing-fa-qing-qiu-diao-yong-oracle-reportsshi-ru-he-xie-ru-ri-zhi-wen-jian.html</guid><category>reports</category></item><item><title>使用VPD对数据进行隔离</title><link>http://dengdezhao.cn/shi-yong-vpddui-shu-ju-jin-xing-ge-chi.html</link><description>&lt;p&gt;项目需求：系统数据表删除操作是直接物理删除，不利于维护历史记录，需要变更为逻辑删除模式。&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;p&gt;对表增加删除标记字段DEL_FLAG varchar2(1) default ‘0’;&lt;/p&gt;

&lt;p&gt;用户执行“删除”操作时，并不执行物理删除操作，而是将DEL_FLAG值设置为‘1’；&lt;/p&gt;

&lt;p&gt;针对数据展示时，删除标记为’1’的数据使用VPD技术屏蔽访问；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1．需要修改的基表[T]新增删除字段：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;alter table&lt;/strong&gt; T &lt;strong&gt;add&lt;/strong&gt; (DEL_FLAG varchar2(1) &lt;strong&gt;default&lt;/strong&gt; '0');--缺省为0，逻辑删除改为1&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2．创建VPD需要的函数：&lt;/strong&gt;&lt;strong&gt;f_limited_query_t&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CREATE OR REPLACE FUNCTION&lt;/strong&gt; f_limited_query_t (s_schema &lt;strong&gt;IN&lt;/strong&gt; VARCHAR2,&lt;/p&gt;

&lt;p&gt;s_object &lt;strong&gt;IN&lt;/strong&gt; VARCHAR2)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RETURN&lt;/strong&gt; VARCHAR2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BEGIN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RETURN&lt;/strong&gt; 'DEL_FLAG!='''||'1'||'''';&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3．创建策略：&lt;/strong&gt;&lt;strong&gt;POLICY_LIMITED_QUERY_T&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BEGIN&lt;/strong&gt;
DBMS_RLS.add_policy (object_schema   =&amp;gt; 'APPS',&lt;br /&gt;
object_name     =&amp;gt; 'T',&lt;br /&gt;
policy_name     =&amp;gt; 'POLICY_LIMITED_QUERY_T',&lt;br /&gt;
function_schema =&amp;gt; 'APPS',&lt;br /&gt;
policy_function =&amp;gt; 'F_LIMITED_QUERY_T');
&lt;strong&gt;END&lt;/strong&gt;;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;取消策略：&lt;/strong&gt;&lt;strong&gt;(&lt;/strong&gt;不用过滤时使用此命令&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BEGIN&lt;/strong&gt;
DBMS_RLS.drop_policy (object_schema   =&amp;gt; 'APPS',&lt;br /&gt;
object_name     =&amp;gt; 'T',&lt;br /&gt;
policy_name     =&amp;gt; 'POLICY_LIMITED_QUERY_T');
&lt;strong&gt;END&lt;/strong&gt;;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4．修改FORM中对相关数据表的删除逻辑为更新DEL_FLAG=1的操作；&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Thu, 28 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-28:shi-yong-vpddui-shu-ju-jin-xing-ge-chi.html</guid><category>VPD</category></item><item><title>adf:tree做的树菜单如何过滤子节点的数据？</title><link>http://dengdezhao.cn/adftreezuo-de-shu-cai-dan-ru-he-guo-lu-zi-jie-dian-de-shu-ju.html</link><description>&lt;p&gt;需求：项目中的树菜单需要权限用户的权限过滤显示子菜单，通过用户所在的用户组可以查看的页面ID（List)过滤子节点&lt;br /&gt;
解决方案：&lt;br /&gt;
因为树是通过viewLink关联自身的VO生成的，想在AM里添加方法，对VO进行过滤处理把结果返回。&lt;br /&gt;
但实现起来比较麻烦，调用方法之后要刷新页面，初始化的树数据过滤处理困难。&lt;br /&gt;
于是想重写VO的方法看能不能在VO层就过滤掉子节点。重写createViewLinkAccessorRS，此方法返回ViewLink的结果，也就是菜单的子节点数据
&lt;div&gt;
&lt;blockquote&gt;
@Override&lt;br /&gt;
protected ViewRowSetImpl createViewLinkAccessorRS(AssociationDefImpl associationDefImpl,&lt;br /&gt;
ViewObjectImpl viewObjectImpl,&lt;br /&gt;
Row row,&lt;br /&gt;
Object[] object) {&lt;br /&gt;
ViewRowSetImpl viewRowSetImpl =&lt;br /&gt;
super.createViewLinkAccessorRS(associationDefImpl, viewObjectImpl,&lt;br /&gt;
row, object);&lt;br /&gt;
int count = 0;&lt;br /&gt;
// getList()拿到可以查看的pageId的列表，对比Row中的pageId属性，如果在List中存在，就取该Row，如果不存      //在，表示此子节点不予以显示，remove掉&lt;br /&gt;
if (this.getList() != null &amp;amp;&amp;amp; this.getList().size() != 0 &amp;amp;&amp;amp;&lt;br /&gt;
viewRowSetImpl != null) {&lt;br /&gt;
for (int m = 0; m &amp;lt; viewRowSetImpl.getRowCount(); m++) {&lt;br /&gt;
if (viewRowSetImpl.getRow(m).getAttribute("pageId") ==&lt;br /&gt;
null) {&lt;br /&gt;
continue;&lt;br /&gt;
}
for (int i = 0; i &amp;lt; this.getList().size(); i++) {&lt;br /&gt;
if (this.getList().get(i).equals(viewRowSetImpl.getRow(m).getAttribute("pageId"))) {&lt;br /&gt;
count++;&lt;br /&gt;
}
}&lt;br /&gt;
if (count == 0) {&lt;br /&gt;
viewRowSetImpl.removeRowAt(m);&lt;br /&gt;
//因为remove掉一行之后，viewRowSetImpl的RowCount就少了1，需要给m也减一，不然可漏掉一行数据未处理。&lt;br /&gt;
m--;&lt;br /&gt;
}
count = 0;&lt;br /&gt;
}
}&lt;/blockquote&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;return viewRowSetImpl;&lt;/p&gt;

&lt;p&gt;}

如此重写了这个方法之后，在调用的时候需要给List赋值，以方便过滤。因此需要给List的 SetList()方法生成Client接口。&lt;br /&gt;
在VO中为setList()添加clientInterface.
&lt;div&gt;
&lt;blockquote&gt;&amp;lt;ClientInterface&amp;gt;&lt;br /&gt;
&amp;lt;Method&lt;br /&gt;
Name="setList"&amp;gt;&lt;br /&gt;
&amp;lt;Return&lt;br /&gt;
Type="void"/&amp;gt;&lt;br /&gt;
&amp;lt;Parameter&lt;br /&gt;
Name="list"&lt;br /&gt;
Type="java.util.ArrayList"&lt;br /&gt;
IsGeneric="true"&amp;gt;&lt;br /&gt;
&amp;lt;Element&lt;br /&gt;
Type="java.lang.String"/&amp;gt;&lt;br /&gt;
&amp;lt;/Parameter&amp;gt;&lt;br /&gt;
&amp;lt;/Method&amp;gt;&lt;br /&gt;
&amp;lt;/ClientInterface&amp;gt;&lt;/blockquote&gt;
&lt;/div&gt;
这样，只需要在页面初始化的时候，给这个VO的list赋值，就可以过滤子节点了
&lt;div&gt;
&lt;blockquote&gt;DCIteratorBinding it2 = ADFUtils.findIterator("MenuVO1Iterator");&lt;br /&gt;
MenuVOImpl vo2 = (MenuVOImpl)it2.getViewObject();&lt;br /&gt;
vo2.setList(list);    //给VO的List赋值。&lt;br /&gt;
vo2.executeQuery();&lt;/blockquote&gt;
&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:adftreezuo-de-shu-cai-dan-ru-he-guo-lu-zi-jie-dian-de-shu-ju.html</guid><category>ADF</category></item><item><title>表内的checkbox当数据量大时发现部分行勾选不中</title><link>http://dengdezhao.cn/biao-nei-de-checkboxdang-shu-ju-liang-da-shi-fa-xian-bu-fen-xing-gou-xuan-bu-zhong.html</link><description>&lt;p&gt;测试发现，当数据只有25行的时候，都可以正常勾选，超过25行的数据，总是勾选不中。&lt;/p&gt;

&lt;p&gt;问题产生原因：&lt;br /&gt;
由于自定制的checkbox是设置了immediate=true 即时给数据行的checkbox字段赋值。&lt;br /&gt;
VO的rangeSize 默认是25，&lt;br /&gt;
因此导致25条数据内是可选。25条之外的数据初始时没有取出来，因此对这些没取的数据行设置checkbox自然就不生效了（展现出来就是checkbox勾选不中）&lt;/p&gt;

&lt;p&gt;解决方案：&lt;br /&gt;
修正VO的rangeSize为-1，查询全部，即可解决此问题。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:biao-nei-de-checkboxdang-shu-ju-liang-da-shi-fa-xian-bu-fen-xing-gou-xuan-bu-zhong.html</guid><category>ADF</category></item><item><title>EBS请求执行时抛出错误Ora-20100和Ora-06512 问题解决</title><link>http://dengdezhao.cn/ebsqing-qiu-zhi-xing-shi-pao-chu-cuo-wu-ora-20100he-ora-06512-wen-ti-jie-jue.html</link><description>&lt;p&gt;执行请求时抛出错误Ora-20100：xxxxx. Ora-06512:xxxxx错误，清空临时文件目录$APPLPTMP即可&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:ebsqing-qiu-zhi-xing-shi-pao-chu-cuo-wu-ora-20100he-ora-06512-wen-ti-jie-jue.html</guid><category>ora-20100</category><category>ora-06512</category></item><item><title>关于定制validator</title><link>http://dengdezhao.cn/guan-yu-ding-zhi-validator.html</link><description>&lt;p&gt;一个时刻字段，要求输入00:00-12:60这样的时刻范围&lt;br /&gt;
使用如下的正则表达式，过滤掉了不合规则的数字之后，还差一个逻辑，结束时刻不能小于开始时刻，比如：10：00-9：00这样的输入也是不合法的。正则太折磨眼力了，应该也是可以做到这点的吧，为了偷懒，就定制个validator来处理这个点。
&lt;div&gt;
&lt;blockquote&gt;&amp;lt;af:validateRegExp pattern="([0-1][0-9]|2[0-4])\:([0-5][0-9]|60)\-([0-1][0-9]|2[0-4])\:([0-5][0-9]|60)" messageDetailNoMatch="请输入时刻，例如 00：00-24：60 " hint="请输入时刻，例如 00：00-24：60"/&amp;gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;strong&gt;Step1&lt;/strong&gt;。创建一个&lt;strong&gt;ValidatorTime&lt;/strong&gt;类实现Validator接口
&lt;div&gt;
&lt;blockquote&gt;package com.adfkf.validators;&lt;/blockquote&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;import javax.faces.application.FacesMessage;&lt;br /&gt;
import javax.faces.component.UIComponent;&lt;br /&gt;
import javax.faces.component.UIInput;&lt;br /&gt;
import javax.faces.context.FacesContext;&lt;br /&gt;
import javax.faces.validator.Validator;&lt;br /&gt;
import javax.faces.validator.ValidatorException;&lt;/p&gt;

&lt;p&gt;import org.apache.myfaces.trinidad.component.UIXInput;&lt;/p&gt;

&lt;p&gt;public class ValidatorTime implements Validator {&lt;br /&gt;
public ValidatorTime() {&lt;br /&gt;
super();&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;public void validate(FacesContext facesContext, UIComponent uiComponent,&lt;br /&gt;
Object object) {&lt;/p&gt;

&lt;p&gt;String value = null;&lt;br /&gt;
String a, b, c, d = null;&lt;br /&gt;
Boolean bool = false;&lt;br /&gt;
if ((facesContext == null) || (uiComponent == null)) {&lt;br /&gt;
throw new NullPointerException();&lt;br /&gt;
}
if (!(uiComponent instanceof UIXInput)) {&lt;br /&gt;
return;&lt;br /&gt;
}
if (null == object) {&lt;br /&gt;
return;&lt;br /&gt;
}
//12:00-23:00&lt;br /&gt;
value = object.toString();&lt;br /&gt;
if (value != null &amp;amp;&amp;amp; value.length() == 11) {&lt;br /&gt;
a = value.substring(0, 2);&lt;br /&gt;
b = value.substring(3, 5);&lt;br /&gt;
c = value.substring(6, 8);&lt;br /&gt;
d = value.substring(9, 11);&lt;br /&gt;
try {&lt;br /&gt;
Integer intA = Integer.valueOf(a);&lt;br /&gt;
Integer intB = Integer.valueOf(b);&lt;br /&gt;
Integer intC = Integer.valueOf(c);&lt;br /&gt;
Integer intD = Integer.valueOf(d);&lt;br /&gt;
if (intC &amp;gt; intA || (intA == intC &amp;amp;&amp;amp; intD &amp;gt; intB)) {&lt;br /&gt;
bool = true;&lt;br /&gt;
} else {&lt;br /&gt;
bool = false;&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;} catch (Exception e) {&lt;br /&gt;
bool = false;&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;}&lt;br /&gt;
if (!bool) {&lt;br /&gt;
FacesMessage message = new FacesMessage();&lt;br /&gt;
message.setDetail("开始时刻大于结束时间");&lt;br /&gt;
message.setSummary("时刻输入有误");&lt;br /&gt;
message.setSeverity(FacesMessage.SEVERITY_ERROR);&lt;br /&gt;
throw new ValidatorException(message);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;br /&gt;
}

&lt;strong&gt;Step2 &lt;/strong&gt;在faces-config.xml中注册这个validator
&lt;div&gt;
&lt;blockquote&gt;&amp;lt;validator&amp;gt;&lt;br /&gt;
&amp;lt;validator-id&amp;gt;validateTime&amp;lt;/validator-id&amp;gt;&lt;br /&gt;
&amp;lt;validator-class&amp;gt;com.adfkf.validators.ValidatorTime&amp;lt;/validator-class&amp;gt;&lt;br /&gt;
&amp;lt;/validator&amp;gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;strong&gt;Step3 &lt;/strong&gt;页面中使用定制的validator
&lt;div&gt;
&lt;blockquote&gt;&amp;lt;af:inputText value="#{row.bindings.ReimTime.inputValue}" disabled="#{sessionScope.flag}"&lt;br /&gt;
label="#{bindings.CostDetailVO.hints.ReimTime.label}"&lt;br /&gt;
required="#{bindings.CostDetailVO.hints.ReimTime.mandatory}"&lt;br /&gt;
shortDesc="#{bindings.CostDetailVO.hints.ReimTime.tooltip}"&lt;br /&gt;
id="id2"&amp;gt;&lt;br /&gt;
&amp;lt;af:validateRegExp pattern="([0-1][0-9]|2[0-4])\:([0-5][0-9]|60)\-([0-1][0-9]|2[0-4])\:([0-5][0-9]|60)" messageDetailNoMatch="请输入时刻，例如 00：00-24：60 " hint="请输入时刻，例如 00：00-24：60"/&amp;gt;&lt;br /&gt;
&amp;lt;f:validator validatorId="validateTime"/&amp;gt;&lt;br /&gt;
&amp;lt;/af:inputText&amp;gt;&lt;/blockquote&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:guan-yu-ding-zhi-validator.html</guid><category>ADF</category></item><item><title>关于ManagedBean中多次执行构造方法时的问题</title><link>http://dengdezhao.cn/guan-yu-managedbeanzhong-duo-ci-zhi-xing-gou-zao-fang-fa-shi-de-wen-ti.html</link><description>&lt;p&gt;有时候需要在初始化时执行一些查询，但发现会多次执行。需要在构造方法里添加一行代码避免页面点击时多次执行初始化。&lt;br /&gt;
if (!(Boolean)ADFUtils.getBindObject("adfFacesContext.postback")) {&lt;br /&gt;
init()；&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;通过页面是否postback来控制只初始化一次。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:guan-yu-managedbeanzhong-duo-ci-zhi-xing-gou-zao-fang-fa-shi-de-wen-ti.html</guid><category>ADF</category></item><item><title>关于selectBooleanCheckbox 的问题</title><link>http://dengdezhao.cn/guan-yu-selectbooleancheckbox-de-wen-ti.html</link><description>&lt;p&gt;页面的 selectBooleanCheckbox 选择后，总提示 不是数字（组件value是 true 或 false,数据库存的是Number），怎么解决&lt;/p&gt;

&lt;p&gt;方案有三个&lt;br /&gt;
1。如果是基于表的Number字段(假设字段名是Flag，值是1或者0），想生成selectBooleanCheckbox ，可以重写这个VO的的 setFlag()跟getFlag()方法如下：&lt;br /&gt;
public void setFlag(Boolean value){&lt;br /&gt;
this.flag=value==true?1:0;&lt;br /&gt;
}
public Boolean getFlag(){&lt;br /&gt;
return this.flag==0?false:true;&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;2。设置valueChangeListener.&lt;br /&gt;
在valueChange方法里捕获当前selectBooleanCheckbox 的值，然后转化成Number类型的传给VO&lt;/p&gt;

&lt;p&gt;3。如果是只读的表，可以在UI上通过EL表达式处理。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:guan-yu-selectbooleancheckbox-de-wen-ti.html</guid><category>ADF</category></item><item><title>关于VO的只读可写等属性设置</title><link>http://dengdezhao.cn/guan-yu-vode-zhi-du-ke-xie-deng-shu-xing-she-zhi.html</link><description>&lt;p&gt;如果生成ViewObject 的时候选择的是只读的VO的话，会发现VO的source里有ReadOnly="true"。&lt;br /&gt;
需求1：在MB中我通过代码拿到这个VO的实例，我想通过以下代码添加Row
&lt;div&gt;
&lt;blockquote&gt;Row newRow=Vo.createRow();&lt;br /&gt;
newRow.setAttribute("attribute1","value1");&lt;br /&gt;
newRow.setAttribute("attribute2","value2");&lt;br /&gt;
newRow.setAttribute("attribute3","value3");&lt;br /&gt;
Vo.insertRow(newRow);&lt;/blockquote&gt;
&lt;/div&gt;
最终发现，只读VO无法插入数据。怎么办？将ReadOnly改成"false"之后测试，发现满足需求~！&lt;br /&gt;
需求2：满足需求1之后发现，Vo里的确插入数据了。如果页面上有保存按钮，也会将这个数据更改到数据库，而这个数据只是需要在MB中起过渡作用，不必将newRow的数据postChange到DB，怎么办？&lt;br /&gt;
VO里 这个属性DeleteParticipant 立功了。 DeleteParticipant就是控制数据是否保存到DB的。设置 DeleteParticipant="false"发现满足了需求！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:guan-yu-vode-zhi-du-ke-xie-deng-shu-xing-she-zhi.html</guid><category>ADF</category></item><item><title>immediate="true" 的异常</title><link>http://dengdezhao.cn/immediatetrue-de-yi-chang.html</link><description>&lt;p&gt;设置按钮的immediate="true" 可以避免因按钮提交FORM导致的页面刷新闪烁，但也会带来麻烦。&lt;br /&gt;
假如对表的取消按钮设置了此属性，可能会发生新增数据，然后点取消作rollback时数据显示异常。&lt;br /&gt;
开发时值得注意&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:immediatetrue-de-yi-chang.html</guid><category>ADF</category></item><item><title>利用javaMail发送邮件功能实现</title><link>http://dengdezhao.cn/li-yong-javamailfa-song-you-jian-gong-neng-shi-xian.html</link><description>&lt;p&gt;由于SMTP服务器需要采用SSL方式访问，所以蛋疼了，默认的连接25端口方式无法连接&lt;br /&gt;
改成465方式访问，又报连接错误，原来是证书文件的问题。&lt;br /&gt;
于是利用 InstallCert.java重新生成证书
&lt;div&gt;
&lt;blockquote&gt;java InstallCert smtp.dengdezhao.cn:465&lt;/blockquote&gt;
&lt;/div&gt;
将得到的证书cacert文件放置在任意路径下：比如C盘 c:/cacert&lt;/p&gt;

&lt;p&gt;程序中props属性里添加如下参数
&lt;div&gt;
&lt;blockquote&gt;props = System.getProperties();&lt;br /&gt;
props.put("mail.smtp.host", smtp.dengdezhao.cn); // 设置SMTP主机&lt;br /&gt;
props.put("mail.smtp.auth", "true");&lt;br /&gt;
props.put("mail.smtp.socketFactory.class",&lt;br /&gt;
"javax.net.ssl.SSLSocketFactory");&lt;br /&gt;
props.put("mail.smtp.socketFactory.fallback", "false");&lt;br /&gt;
props.put("mail.smtp.socketFactory.port", "465");&lt;br /&gt;
props.put("mail.debug", "true");&lt;br /&gt;
props.put("javax.net.ssl.keyStore", "c:\\cacert");&lt;br /&gt;
props.put("javax.net.ssl.trustStore", "c:\\cacert");&lt;/blockquote&gt;
&lt;/div&gt;
即可。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:li-yong-javamailfa-song-you-jian-gong-neng-shi-xian.html</guid><category>javamail</category></item><item><title>oracle数据库用户被锁问题解决</title><link>http://dengdezhao.cn/oracleshu-ju-ku-yong-hu-bei-suo-wen-ti-jie-jue.html</link><description>&lt;p&gt;运行AM的时候报个JDBC连接错误，ORA-280000:用户被锁的异常。&lt;br /&gt;
于是在PL/SQL DEV里切换成SYSTEM用户 alter user XXX account unlock;之后，用PL/SQL DEV测试 可以连上了&lt;br /&gt;
再运行AM的时候，又报了个用户被锁。很是蛋疼&lt;br /&gt;
于是换到命令行，尝试以SYSDBA的身份再执行一次alter account unlock;&lt;br /&gt;
发现连不上：报了以下错误：&lt;br /&gt;
ORA-28056: Writing audit records to Windows Event Log failed&lt;br /&gt;
这你妹的，原来是系统日志满了，解决方案：&lt;br /&gt;
打开windows 事件查看器，将应用程序日志清理一下，重新连接数据库，连接成功。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:oracleshu-ju-ku-yong-hu-bei-suo-wen-ti-jie-jue.html</guid><category>ADF</category></item><item><title>如何在MB中对selectionListener collectionModel.makeCurrent调用</title><link>http://dengdezhao.cn/ru-he-zai-mbzhong-dui-selectionlistener-collectionmodelmakecurrentdiao-yong.html</link><description>&lt;p&gt;如何在MB中对Table的默认"#{bindings.PromotionVO1.collectionModel.makeCurrent}"进行调用？&lt;/p&gt;

&lt;p&gt;当需要重写adf:table的缺省的selectListener时，可以在自己绑定的MB的方法里，调用默认的makeCurrent方法。取得当前行的数据，进行自己的定制操作。方法如下：
&lt;div&gt;
&lt;blockquote&gt;//调用缺省makeCurrent&lt;br /&gt;
JSFUtils.resolveMethodExpression("#{bindings.yourVO.collectionModel.makeCurrent}",&lt;br /&gt;
new Class[] { SelectionEvent.class },&lt;br /&gt;
new Object[] { selectionEvent });&lt;/blockquote&gt;
&lt;/div&gt;
取得选中行的数据
&lt;div&gt;
&lt;blockquote&gt;Row selectedRow =&lt;br /&gt;
(Row)JSFUtils.resolveExpression("#{bindings.yourVOIterator.currentRow}");&lt;/blockquote&gt;
&lt;/div&gt;
然后就可以针对取得的数据进行定制开发了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:ru-he-zai-mbzhong-dui-selectionlistener-collectionmodelmakecurrentdiao-yong.html</guid><category>ADF</category></item><item><title>Table内增加全选checkbox</title><link>http://dengdezhao.cn/tablenei-zeng-jia-quan-xuan-checkbox.html</link><description>&lt;p&gt;解决方案：     &lt;/p&gt;
&lt;p&gt;VO里新建Transient属性Checked(Boolean)    &lt;/p&gt;
&lt;p&gt;表内添加一个column如下：  &lt;br /&gt;
{% codeblock lang:java %}
&lt;af:column id="c10" headerText="选择" width="30" align="center" noWrap="true"&gt;
&lt;f:facet name="header" &gt;
&lt;af:selectBooleanCheckbox valueChangeListener="#{backingBean.selectAll}"
autoSubmit="true" id="selectAll"
label="" value=""
&lt;/f:facet&gt;
&lt;af:selectBooleanCheckbox label="选中/非选中" id="sbc1"  autoSubmit="true" immediate="true"
value="#{row.bindings.Checked.inputValue}"/&gt;&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;&lt;/af:column&gt;&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
pupblic void selectAll(ValueChangeEvent valueChangeEvent) {
CIteratorBinding it = ADFUtils.findIterator(REIM_HEADER_ITER);
ViewObject vo = it.getViewObject();&lt;/p&gt;
&lt;p&gt;if (valueChangeEvent.getNewValue() != null) {
Boolean selectAll =
Boolean.parseBoolean(valueChangeEvent.getNewValue().toString());
if (!selectAll) {
for (Row temp : vo.getAllRowsInRange()) {
temp.setAttribute(&amp;ldquo;Checked&amp;rdquo;, false);
}
} else {
for (Row temp : vo.getAllRowsInRange()) {
temp.setAttribute(&amp;ldquo;Checked&amp;rdquo;, true);
}
}
RichTable table = (RichTable)JSFUtils.findComponentInRoot(&amp;ldquo;t1&amp;rdquo;);
AdfFacesContext.getCurrentInstance().addPartialTarget(table);
}
}
{% endcodeblock %}
以上即可实现此需求.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:tablenei-zeng-jia-quan-xuan-checkbox.html</guid><category>ADF</category></item><item><title>weblogic定时启动程序</title><link>http://dengdezhao.cn/weblogicding-shi-qi-dong-cheng-xu.html</link><description>&lt;p&gt;有个需求是要求程序在每天晚上3点钟的时候自动调用一个Job执行。&lt;/p&gt;

&lt;p&gt;解决方案：定制weblogic的启动类，用来运行Job执行。&lt;/p&gt;

&lt;p&gt;STEP1，启动类StartupTask：
&lt;div&gt;
&lt;blockquote&gt;public class StartupTask implements T3StartupDef {&lt;br /&gt;
public String startup(String name, Hashtable args) throws Exception {&lt;/blockquote&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Callplsql.main(null);&lt;/p&gt;

&lt;p&gt;return "Callplsql Startup successful completed";&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;public void setServices(T3ServicesDef t3ServicesDef) {&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;}

Callplsql.java(  即是JOB类，是需要被调用的，要继承TimerTask  ）中的Main方法要有：
&lt;div&gt;
&lt;blockquote&gt;public static void main(String[] args) {&lt;br /&gt;
//任务执行间隔时间，默认24小时&lt;br /&gt;
long PERIOD_TIME=24*60*60*1000;&lt;br /&gt;
long delay=0;&lt;br /&gt;
//任务首次启动时间，默认零晨3点&lt;br /&gt;
Calendar end=Calendar.getInstance();&lt;br /&gt;
end.set(Calendar.HOUR_OF_DAY, 3);&lt;br /&gt;
end.set(Calendar.MINUTE, 0);&lt;br /&gt;
end.set(Calendar.SECOND, 0);&lt;br /&gt;
Calendar now=Calendar.getInstance();&lt;br /&gt;
delay=end.getTime().getTime()-now.getTime().getTime();&lt;br /&gt;
if(delay&amp;lt;=0){&lt;br /&gt;
delay=PERIOD_TIME+delay;&lt;br /&gt;
}
System.out.println("当前时间："+now.getTime());&lt;br /&gt;
System.out.println("首次启动SAP同步程序时间："+end.getTime());&lt;br /&gt;
System.out.println("延时："+delay+"毫秒启动SAP同步程序！");&lt;/blockquote&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;//      待执行的任务&lt;br /&gt;
Timer time=new Timer();&lt;br /&gt;
Callplsql task=new Callplsql();&lt;br /&gt;
time.schedule(task,delay,PERIOD_TIME);&lt;/p&gt;

&lt;p&gt;}

通过time.schedule每天零晨3：00循环调用JOB。&lt;/p&gt;

&lt;p&gt;编译好StartupTask类后，要在weblogic控制台设置好启动类即可实现此需求。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:weblogicding-shi-qi-dong-cheng-xu.html</guid><category>ADF</category></item><item><title>硬盘安装fedora</title><link>http://dengdezhao.cn/ying-pan-an-zhuang-fedora.html</link><description>&lt;p&gt;下载好fedora16 ISO镜像文件放在C盘，解压出来images文件，及vmlinuz,initrd.img文件。使用grub引导硬盘安装，分区时报错：&lt;br /&gt;
you have not created a bootloader stage1 target device&lt;/p&gt;

&lt;p&gt;This can happen if there is not enough space on your hard drive(s) for the installation.&lt;/p&gt;

&lt;p&gt;解决方案：引导参数加上linux askmethod，选择正确的镜像路径sda1即可。&lt;/p&gt;

&lt;p&gt;grub&amp;gt;root (hd0,0)&lt;br /&gt;
grub&amp;gt;kernel (hd0,0)/vmlinuz &lt;span style="color: red;"&gt;linux askmethod&lt;/span&gt; (之前没有加此参数）&lt;br /&gt;
grub&amp;gt;initrd (hd0,0)/initrd.img&lt;br /&gt;
grub&amp;gt;boot&lt;/p&gt;

&lt;p&gt;即可开始正常安装。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 26 Jun 2012 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2012-06-26:ying-pan-an-zhuang-fedora.html</guid><category>fedora</category></item><item><title>如何让af:inputListOfValues（LOV）的初始值显示为Blank而不是默认的VO的First Row</title><link>http://dengdezhao.cn/ru-he-rang-afinputlistofvalueslovde-chu-shi-zhi-xian-shi-wei-blanker-bu-shi-mo-ren-de-vode-first-row.html</link><description>&lt;p&gt;目前LOV控件在页面初始化时默认显示的是第一条记录，如果想让LOV初始化的时候不显示记录应该如何设置呢？&lt;/p&gt;

&lt;p&gt;方法一. 通过在BackingBean的构造函数里设置LOV的值为空字符串这种做法基本可以达到需求。但总感觉这种方法很别扭，走了弯路。&lt;/p&gt;

&lt;p&gt;本文介绍另外一种更为简单的方法。通过EL表达式实现需求。
&lt;pre class="brush:java"&gt;           &amp;lt;af:inputListOfValues id="ilov1"
                                    popupTitle="Search and Select: #{bindings.CodeType.hints.label}"
                                    value="#{adfFacesContext.postback == false ? bindings.CodeType.nullValueString : bindings.CodeType.inputValue}"
                                    label="#{bindings.CodeType.hints.label}"
                                    model="#{bindings.CodeType.listOfValuesModel}"
                                    required="#{bindings.CodeType.hints.mandatory}"
                                    columns="#{bindings.CodeType.hints.displayWidth}"
                                    shortDesc="#{bindings.CodeType.hints.tooltip}"
                                    binding="#{backing_pages_frs001.ilov1}"
                                    valueChangeListener="#{backing_pages_frs001.valueChange}"
                                    &amp;gt;&lt;/pre&gt;
看这段代码：
&lt;blockquote&gt;
&lt;pre&gt;value="#{&lt;span style="color: #ff0000;"&gt;adfFacesContext.postback == false ? bindings.CodeType.nullValueString : &lt;/span&gt;bindings.CodeType.inputValue}"&lt;/pre&gt;
&lt;/blockquote&gt;
当页面没有postback的时候，给LOV字段的值设为&lt;strong&gt;nullValueString&lt;/strong&gt;，即可。&lt;/p&gt;

&lt;p&gt;今天太困了。。。先睡了。。。不贴图了~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2011-07-20:ru-he-rang-afinputlistofvalueslovde-chu-shi-zhi-xian-shi-wei-blanker-bu-shi-mo-ren-de-vode-first-row.html</guid><category>ADF</category></item><item><title>oracle 11g 数据库安装后改计算机名出现无法连接的问题解决</title><link>http://dengdezhao.cn/oracle-11g-shu-ju-ku-an-zhuang-hou-gai-ji-suan-ji-ming-chu-xian-wu-fa-lian-jie-de-wen-ti-jie-jue.html</link><description>&lt;p&gt;在局域网内一台机器上安装完oracle11g之后，本地测试OK 可以访问orcl。用局域网内另一台机器连接的时候不行。&lt;br /&gt;
两台机器可以PING通。&lt;br /&gt;
修改tnsname.ora  把默认的localhost 都改成了本机IP 试试还是不行。&lt;br /&gt;
然后改了下计算机名，各种测试，打开EM还是只看到实例正常，监听程序为状态为不可用，实例的代理连接状态为不可用。&lt;br /&gt;
很是蛋疼，手贱不应该改计算机名啊。。。&lt;br /&gt;
想想多有可能要改的都改好了。。。怎么还是连不上？&lt;br /&gt;
是不是刚改好的还没有生效？&lt;br /&gt;
lsnrctl stop&lt;br /&gt;
lsnrctl start&lt;br /&gt;
各种重启服务之后，终于见到了全绿~~~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Fri, 15 Jul 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2011-07-15:oracle-11g-shu-ju-ku-an-zhuang-hou-gai-ji-suan-ji-ming-chu-xian-wu-fa-lian-jie-de-wen-ti-jie-jue.html</guid><category>oracle</category></item><item><title>如何让ADF日期组件显示时分秒</title><link>http://dengdezhao.cn/ru-he-rang-adfri-qi-zu-jian-xian-shi-shi-fen-miao.html</link><description>&lt;p&gt;默认的ADF的inputDate组件是不显示时分秒的，客户的需求要精确到时分秒的显示。其实只需要一个很小的改动就可以实现这个需求。&lt;/p&gt;

&lt;p&gt;以HR的Employee表为例&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step.1 &lt;/strong&gt;创建Business Components from table，得到EO，VO等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step.2&lt;/strong&gt; 双击Employees EO，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step.3&lt;/strong&gt; 找到日期属性HireDate,双击打开属性编辑页，作如下修改（&lt;span style="color: #ff0000;"&gt;Format Type: Simple Date; Format: yyyy-MM-dd HH:mm:ss&lt;/span&gt;), OK。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step.4 &lt;/strong&gt;切换到Source页，将HireDate属性的类型type="oracle.jbo.domain.Date"改为下图所示的"oracle.jbo.domain.Timestamp"类型，保存即可。&lt;strong&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step.5&lt;/strong&gt; 将Employees VO生成的DataControl拖到页面上生成一个ADF form，然后运行看下效果吧~&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Fri, 15 Jul 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2011-07-15:ru-he-rang-adfri-qi-zu-jian-xian-shi-shi-fen-miao.html</guid><category>ADF</category></item><item><title>多语言切换功能实现</title><link>http://dengdezhao.cn/duo-yu-yan-qie-huan-gong-neng-shi-xian.html</link><description>&lt;p&gt;&lt;strong&gt;Step.1 &lt;/strong&gt;新建测试工程&lt;strong&gt; Fusion Web Application(ADF)&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step.2 &lt;/strong&gt;创建resource Bundle 文件，如下所示，我创建了三个语言版本的文件。
&lt;blockquote&gt;&lt;span style="color: #ff0000;"&gt;ScreenConfig&lt;/span&gt;_&lt;span style="color: #0000ff;"&gt;en&lt;/span&gt;_&lt;span style="color: #ff00ff;"&gt;US&lt;/span&gt;.properties&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="color: #ff0000;"&gt;ScreenConfig&lt;/span&gt;_&lt;span style="color: #0000ff;"&gt;zh&lt;/span&gt;_&lt;span style="color: #ff00ff;"&gt;CN&lt;/span&gt;.properties&lt;/p&gt;

&lt;p&gt;&lt;span style="color: #ff0000;"&gt;ScreenConfig&lt;/span&gt;_&lt;span style="color: #0000ff;"&gt;ja&lt;/span&gt;_&lt;span style="color: #ff00ff;"&gt;JP&lt;/span&gt;.properties
&lt;strong&gt;Step.3&lt;/strong&gt; 在faces-config.xml中注册以上三个文件。
&lt;blockquote&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;
&amp;lt;faces-config version="1.2" xmlns="http://java.sun.com/xml/ns/javaee"&amp;gt;&lt;br /&gt;
&amp;lt;application&amp;gt;&lt;br /&gt;
&amp;lt;default-render-kit-id&amp;gt;oracle.adf.rich&amp;lt;/default-render-kit-id&amp;gt;
&lt;span style="color: #ff00ff;"&gt;&amp;lt;resource-bundle&amp;gt;&lt;/span&gt;
&lt;span style="color: #ff00ff;"&gt; &amp;lt;base-name&amp;gt;ScreenConfig&amp;lt;/base-name&amp;gt;&lt;/span&gt;
&lt;span style="color: #ff00ff;"&gt; &amp;lt;var&amp;gt;screen&amp;lt;/var&amp;gt;&lt;/span&gt;
&lt;span style="color: #ff00ff;"&gt; &amp;lt;/resource-bundle&amp;gt;&lt;/span&gt;
&lt;span style="color: #ff00ff;"&gt; &amp;lt;locale-config&amp;gt;&lt;/span&gt;
&lt;span style="color: #ff00ff;"&gt; &amp;lt;default-locale&amp;gt;zh_CN&amp;lt;/default-locale&amp;gt;&lt;/span&gt;
&lt;span style="color: #ff00ff;"&gt; &amp;lt;supported-locale&amp;gt;en_US&amp;lt;/supported-locale&amp;gt;&lt;/span&gt;
&lt;span style="color: #ff00ff;"&gt; &amp;lt;supported-locale&amp;gt;ja_JP&amp;lt;/supported-locale&amp;gt;&lt;/span&gt;
&lt;span style="color: #ff00ff;"&gt; &amp;lt;/locale-config&amp;gt;&lt;/span&gt;
&amp;lt;/application&amp;gt;&lt;br /&gt;
&amp;lt;/faces-config&amp;gt;&lt;/blockquote&gt;
&lt;strong&gt;Step.4&lt;/strong&gt; 新建一个测试页面
&lt;blockquote&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;&lt;br /&gt;
&amp;lt;jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" version="2.1"&lt;br /&gt;
xmlns:f="http://java.sun.com/jsf/core"&lt;br /&gt;
xmlns:h="http://java.sun.com/jsf/html"&lt;br /&gt;
xmlns:af="http://xmlns.oracle.com/adf/faces/rich"&amp;gt;&lt;br /&gt;
&amp;lt;jsp:directive.page contentType="text/html;charset=UTF-8"/&amp;gt;&lt;br /&gt;
&amp;lt;f:view &amp;gt;&lt;br /&gt;
&amp;lt;af:document id="d1"&amp;gt;
&lt;span style="color: #ff00ff;"&gt;&amp;lt;f:loadBundle basename="ScreenConfig" var="screen"   /&amp;gt;&lt;/span&gt;
&amp;lt;af:form id="f1"&amp;gt;&lt;br /&gt;
&amp;lt;af:inputText label="&lt;span style="color: #ff00ff;"&gt;#{screen.test}&lt;/span&gt;" id="it1"/&amp;gt;&lt;br /&gt;
&amp;lt;af:commandButton text="&lt;span style="color: #ff00ff;"&gt;#{screen.command}&lt;/span&gt;" id="en"  partialTriggers="en"&lt;br /&gt;
action="&lt;span style="color: #ff00ff;"&gt;#{BackingBean.changeLang}"&lt;/span&gt;/&amp;gt;&lt;br /&gt;
&amp;lt;/af:form&amp;gt;&lt;br /&gt;
&amp;lt;/af:document&amp;gt;&lt;br /&gt;
&amp;lt;/f:view&amp;gt;&lt;br /&gt;
&amp;lt;!--oracle-jdev-comment:preferred-managed-bean-name:BackingBean--&amp;gt;&lt;br /&gt;
&amp;lt;/jsp:root&amp;gt;&lt;/blockquote&gt;
&lt;strong&gt;Step.5&lt;/strong&gt; 生成的BackingBean中内容如下：
&lt;blockquote&gt;package view;&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;import java.util.Locale;&lt;br /&gt;
import java.util.ResourceBundle;&lt;/p&gt;

&lt;p&gt;import javax.faces.context.FacesContext;&lt;/p&gt;

&lt;p&gt;import javax.servlet.http.HttpServletRequest;&lt;br /&gt;
import javax.servlet.http.HttpSession;&lt;/p&gt;

&lt;p&gt;public class BackingBean {&lt;br /&gt;
public BackingBean() {&lt;br /&gt;
}
private Locale locale;&lt;/p&gt;

&lt;p&gt;public String changeLang() {&lt;/p&gt;

&lt;p&gt;FacesContext facesContext = FacesContext.getCurrentInstance();&lt;br /&gt;
HttpServletRequest request =&lt;br /&gt;
(HttpServletRequest)facesContext.getExternalContext().getRequest();&lt;br /&gt;
String flag =&lt;br /&gt;
request.getSession().getAttribute("flag") == null ? "ZH" :&lt;br /&gt;
request.getSession().getAttribute("flag").toString();&lt;/p&gt;

&lt;p&gt;if ("ZH".equals(flag)) {&lt;br /&gt;
flag = "EN";&lt;br /&gt;
this.setLocale(new Locale("zh", "CN"));&lt;br /&gt;
} else if ("EN".equals(flag)) {&lt;br /&gt;
flag = "JA";&lt;br /&gt;
this.setLocale(new Locale("en", "US"));&lt;br /&gt;
} else if ("JA".equals(flag)) {&lt;br /&gt;
flag = "ZH";&lt;br /&gt;
this.setLocale(new Locale("ja", "JP"));&lt;br /&gt;
}
request.getSession().setAttribute("flag", flag);&lt;br /&gt;
facesContext.getViewRoot().setLocale(locale);&lt;br /&gt;
return null;&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;public void setLocale(Locale locale) {&lt;br /&gt;
this.locale = locale;&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;public Locale getLocale() {&lt;br /&gt;
return locale;&lt;br /&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2011-07-13:duo-yu-yan-qie-huan-gong-neng-shi-xian.html</guid><category>ADF</category></item><item><title>ADF应用中如何在BackingBean中调用javascript控制UI</title><link>http://dengdezhao.cn/adfying-yong-zhong-ru-he-zai-backingbeanzhong-diao-yong-javascriptkong-zhi-ui.html</link><description>&lt;p&gt;当你需要在ManagedBean中控制页面控制的属性的时候，可以使用以下代码调用javascript实现。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;
&lt;pre class="brush:java"&gt;//import org.apache.myfaces.trinidad.util.Service;
String script="你的javascript代码";&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;FacesContext context = &lt;br /&gt;
        FacesContext.getCurrentInstance();&lt;/p&gt;

&lt;p&gt;ExtendedRenderKitService erks = &lt;br /&gt;
        (ExtendedRenderKitService)Service.&lt;br /&gt;
        getService(context.getRenderKit(), &lt;br /&gt;
        ExtendedRenderKitService.class);&lt;/p&gt;

&lt;p&gt;erks.addScript(context, script);
&amp;nbsp;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 29 Jun 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2011-06-29:adfying-yong-zhong-ru-he-zai-backingbeanzhong-diao-yong-javascriptkong-zhi-ui.html</guid><category>ADF</category></item><item><title>javax.el.PropertyNotFoundException错误解决</title><link>http://dengdezhao.cn/javaxelpropertynotfoundexceptioncuo-wu-jie-jue.html</link><description>&lt;p&gt;有时候明明没有什么错误，一样的代码在别人机器上跑没问题，自己机器上跑却会出现以下这样的错误：
&lt;pre class="brush:java"&gt;javax.el.PropertyNotFoundException: Target Unreachable, identifier 'bindings' resolved to null&lt;/pre&gt;
这样的错误会随着代码量的增加而越发频繁，是IDE的缓存的BUG，如果重启jdeveloper 还不能解决的话，把报错的那个bindings的pagedef文件改动下（加一行空格）保存，然后clean all，再重新build下，基本能够解决这个问题。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 29 Jun 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2011-06-29:javaxelpropertynotfoundexceptioncuo-wu-jie-jue.html</guid><category>ADF</category></item><item><title>ADF应用“Remote deployment failed”错误解决</title><link>http://dengdezhao.cn/adfying-yong-remote-deployment-failedcuo-wu-jie-jue.html</link><description>&lt;p&gt;ADF应用debug模式下最常出现的问题就是远程发布失败了。控制台打印的错误信息如下：
&lt;pre class="brush:plain"&gt;[07:21:55 PM] ####  Deployment incomplete.  ####
[07:21:55 PM] Remote deployment failed (oracle.jdevimpl.deploy.common.Jsr88RemoteDeployer)
#### Cannot run application XXX due to error deploying to IntegratedWebLogicServer.
[Application XXX stopped and undeployed from Server Instance IntegratedWebLogicServer]
&amp;lt;Logger&amp;gt;&amp;lt;error&amp;gt; ServletContainerAdapter manager not initialized correctly.&lt;/pre&gt;
解决方法有两种：&lt;/p&gt;

&lt;p&gt;方法一：进入weblogic控制台&lt;span style="color: #0000ff;"&gt;http://127.0.0.1:7101/console&lt;/span&gt;
&lt;pre class="brush:plain"&gt;用户名：weblogic
密 码：weblogic1&lt;/pre&gt;
此时控制面板的左上区域应该会有两个按钮“&lt;span style="color: #0000ff;"&gt;激活更改&lt;/span&gt;”，“&lt;span style="color: #0000ff;"&gt;撤销所有更改&lt;/span&gt;”，点击任一按钮皆可，然后重新debug，问题解决。&lt;/p&gt;

&lt;p&gt;方法二：查看控制台信息，找到类似于“&lt;span style="color: #0000ff;"&gt;C:\Documents and Settings\Administrator\Application Data\JDeveloper\system11.1.1.3.37.56.60\o.j2ee\drs\&lt;/span&gt;”的路径（这个路径跟你jdeveloper安装路径相关，system目录后的数字也是不同的）。进入到drs目录下，清空所有内容。重新debug，问题解决。&lt;!--more--&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Tue, 28 Jun 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2011-06-28:adfying-yong-remote-deployment-failedcuo-wu-jie-jue.html</guid><category>ADF</category></item><item><title>定制ADF应用的CSS</title><link>http://dengdezhao.cn/ding-zhi-adfying-yong-de-css.html</link><description>&lt;p&gt;客户的要求总是各种变态，如果需要定制默认的控件样式的话，那么以下的文章可能会对你有帮助。&lt;/p&gt;
&lt;p&gt;Step.1 首先我们需要定义自己的CSS文件 &lt;span style="color: #0000ff;"&gt;CustomSkin.css&lt;/span&gt;
&lt;pre class="brush:css"&gt;af|inputListOfValues::search-icon-style{
  background-image:none;
}&lt;/pre&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;af|inputListOfValues::search-icon-style:hover{&lt;br /&gt;
  background-image:none;&lt;br /&gt;
}
af|inputListOfValues::search-icon-style:active{&lt;br /&gt;
  background-image:none;&lt;br /&gt;
}
af|inputListOfValues::search-icon-style:info{&lt;br /&gt;
  background-image:none;&lt;br /&gt;
}
Step.2 接着创建 &lt;span style="color: #0000ff;"&gt;trinidad-skins.xml&lt;/span&gt;
&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="ISO-8859-1"?&amp;gt;
&amp;lt;skins xmlns="http://myfaces.apache.org/trinidad/skin"&amp;gt;
  &amp;lt;skin&amp;gt;
    &amp;lt;id&amp;gt;customSkin.desktop&amp;lt;/id&amp;gt;
    &amp;lt;family&amp;gt;CustomSkin&amp;lt;/family&amp;gt;
    &amp;lt;extends&amp;gt;blafplus-rich.desktop&amp;lt;/extends&amp;gt;
    &amp;lt;render-kit-id&amp;gt;org.apache.myfaces.trinidad.desktop&amp;lt;/render-kit-id&amp;gt;
    &amp;lt;style-sheet-name&amp;gt;css/CustomSkin.css&amp;lt;/style-sheet-name&amp;gt;
  &amp;lt;/skin&amp;gt;
&amp;lt;/skins&amp;gt;&lt;/pre&gt;
Step.3 修改 &lt;span style="color: #0000ff;"&gt;trinidad-config.xml&lt;/span&gt;
&lt;pre class="brush:xml"&gt; &amp;lt;skin-family&amp;gt;CustomSkin&amp;lt;/skin-family&amp;gt;&lt;/pre&gt;
Step.4 修改&lt;span style="color: #0000ff;"&gt;web.xml&lt;/span&gt;
&lt;pre class="brush:xml"&gt;&amp;lt;context-param&amp;gt;
    &amp;lt;description&amp;gt;If this parameter is true, there will be an automatic check of the modification date of your JSPs, and saved state will be discarded when JSP's change. It will also automatically check if your skinning css files have changed without you having to restart the server. This makes development easier, but adds overhead. For this reason this parameter should be set to false when your application is deployed.&amp;lt;/description&amp;gt;
    &amp;lt;param-name&amp;gt;org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt;
  &amp;lt;/context-param&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;context-param&amp;gt;&lt;br /&gt;
    &amp;lt;description&amp;gt;No obfuscation of CSS.&amp;lt;/description&amp;gt;&lt;br /&gt;
    &amp;lt;param-name&amp;gt;org.apache.myfaces.trinidad.DISABLE_CONTENT_COMPRESSION&amp;lt;/param-name&amp;gt;&lt;br /&gt;
    &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt;&lt;br /&gt;
  &amp;lt;/context-param&amp;gt;
重启下应用就会发现控件样式已经采用自定义CSS文件里的样式了！&lt;span style="color: #0000ff;"&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Mon, 27 Jun 2011 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2011-06-27:ding-zhi-adfying-yong-de-css.html</guid><category>ADF</category></item><item><title>About</title><link>http://dengdezhao.cn/about.html</link><description>&lt;h4 id="nickname-pierreorz-or-49"&gt;NickName: pierreorz or 49&lt;/h4&gt;
&lt;p&gt;目前自由职业，工作事宜你可以联系我：&lt;/p&gt;
&lt;h4 id="email"&gt;Email:&lt;/h4&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;pierreorz AT 126.com
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="qq"&gt;QQ:&lt;/h4&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;54482733
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="_1"&gt;关于本博&lt;/h4&gt;
&lt;div class="codehilite" style="background: #f8f8f8"&gt;&lt;pre style="line-height: 125%"&gt;&lt;span&gt;&lt;/span&gt;2016-05-30 使用pelican重构
2014-04-25 因政策原因stdyun.com迁至国外，重新托管于github.com    
2013-04-15 托管服务器从github.com迁至stdyun.com
2013-03-12 绑定域名dengdezhao.cn
2013-03-09 从WordPress迁移至Octopress
2011-05-25 adfkf.com 基于wordpress搭建
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pierreorz</dc:creator><pubDate>Wed, 09 Aug 2000 22:56:00 +0800</pubDate><guid isPermaLink="false">tag:dengdezhao.cn,2000-08-09:about.html</guid></item></channel></rss>